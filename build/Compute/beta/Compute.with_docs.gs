
/**
 * Google Apps Script client library for the Compute Engine API
 * Documentation URL: https://cloud.google.com/compute/
 * @class
 */
class Compute {
  /**
   * @constructor
   * @param {object} [config] - Optional configuration object.
   * @param {string} [config.token] - An explicit OAuth2 token.
   * @param {object} [config.backoff] - Configuration for exponential backoff.
   */
  constructor(config = {}) {
    // "Private" properties using the underscore convention
    this._token = config.token || ScriptApp.getOAuthToken();
    this._backoffConfig = Object.assign({ retries: 3, baseDelay: 1000 }, config.backoff);
    this._rootUrl = 'https://compute.googleapis.com/';
    this._servicePath = 'compute/beta/';

    // --- Public Interface Initialization ---

    this.globalOperations = {};

    /**
     * Retrieves a list of Operation resources contained within the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalOperations.list = (params) => this._makeRequest('projects/{project}/global/operations', 'GET', params);

    /**
     * Retrieves an aggregated list of all operations. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.globalOperations.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/operations', 'GET', params);

    /**
     * Retrieves the specified Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalOperations.get = (params) => this._makeRequest('projects/{project}/global/operations/{operation}', 'GET', params);

    /**
     * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalOperations.wait = (params) => this._makeRequest('projects/{project}/global/operations/{operation}/wait', 'POST', params);

    /**
     * Deletes the specified Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to delete, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalOperations.delete = (params) => this._makeRequest('projects/{project}/global/operations/{operation}', 'DELETE', params);

    this.globalOrganizationOperations = {};

    /**
     * Retrieves a list of Operation resources contained within the specified organization.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.parentId - Parent ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalOrganizationOperations.list = (params) => this._makeRequest('locations/global/operations', 'GET', params);

    /**
     * Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.parentId - Parent ID for this request.
     * @return {object} The API response object.
     */
    this.globalOrganizationOperations.get = (params) => this._makeRequest('locations/global/operations/{operation}', 'GET', params);

    /**
     * Deletes the specified Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to delete, or its unique numeric identifier.
     * @param {string} params.parentId - Parent ID for this request.
     * @return {object} The API response object.
     */
    this.globalOrganizationOperations.delete = (params) => this._makeRequest('locations/global/operations/{operation}', 'DELETE', params);

    this.zoneOperations = {};

    /**
     * Retrieves a list of Operation resources contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for request.
     * @return {object} The API response object.
     */
    this.zoneOperations.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/operations', 'GET', params);

    /**
     * Retrieves the specified zone-specific Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.zoneOperations.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/operations/{operation}', 'GET', params);

    /**
     * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method waits for no more than the 2 minutes and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.zoneOperations.wait = (params) => this._makeRequest('projects/{project}/zones/{zone}/operations/{operation}/wait', 'POST', params);

    /**
     * Deletes the specified zone-specific Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to delete, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.zoneOperations.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/operations/{operation}', 'DELETE', params);

    this.regionOperations = {};

    /**
     * Retrieves a list of Operation resources contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionOperations.list = (params) => this._makeRequest('projects/{project}/regions/{region}/operations', 'GET', params);

    /**
     * Retrieves the specified region-specific Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionOperations.get = (params) => this._makeRequest('projects/{project}/regions/{region}/operations/{operation}', 'GET', params);

    /**
     * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
     * @param {string} params.operation - (Required) Name of the Operations resource to return, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionOperations.wait = (params) => this._makeRequest('projects/{project}/regions/{region}/operations/{operation}/wait', 'POST', params);

    /**
     * Deletes the specified region-specific Operations resource.
     * @param {string} params.operation - (Required) Name of the Operations resource to delete, or its unique numeric identifier.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionOperations.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/operations/{operation}', 'DELETE', params);

    this.acceleratorTypes = {};

    /**
     * Retrieves a list of accelerator types that are available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.acceleratorTypes.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/acceleratorTypes', 'GET', params);

    /**
     * Retrieves an aggregated list of accelerator types. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.acceleratorTypes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/acceleratorTypes', 'GET', params);

    /**
     * Returns the specified accelerator type.
     * @param {string} params.acceleratorType - (Required) Name of the accelerator type to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.acceleratorTypes.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}', 'GET', params);

    this.globalAddresses = {};

    /**
     * Retrieves a list of global addresses.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalAddresses.list = (params) => this._makeRequest('projects/{project}/global/addresses', 'GET', params);

    /**
     * Returns the specified address resource.
     * @param {string} params.address - (Required) Name of the address resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalAddresses.get = (params) => this._makeRequest('projects/{project}/global/addresses/{address}', 'GET', params);

    /**
     * Creates an address resource in the specified project by using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalAddresses.insert = (params) => this._makeRequest('projects/{project}/global/addresses', 'POST', params);

    /**
     * Deletes the specified address resource.
     * @param {string} params.address - (Required) Name of the address resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.globalAddresses.delete = (params) => this._makeRequest('projects/{project}/global/addresses/{address}', 'DELETE', params);

    /**
     * Moves the specified address resource from one project to another project.
     * @param {string} params.address - (Required) Name of the address resource to move.
     * @param {string} params.project - (Required) Source project ID which the Address is moved from.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalAddresses.move = (params) => this._makeRequest('projects/{project}/global/addresses/{address}/move', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalAddresses.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/addresses/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalAddresses.setLabels = (params) => this._makeRequest('projects/{project}/global/addresses/{resource}/setLabels', 'POST', params);

    this.addresses = {};

    /**
     * Retrieves a list of addresses contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.addresses.list = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses', 'GET', params);

    /**
     * Retrieves an aggregated list of addresses. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.addresses.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/addresses', 'GET', params);

    /**
     * Returns the specified address resource.
     * @param {string} params.address - (Required) Name of the address resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.addresses.get = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses/{address}', 'GET', params);

    /**
     * Creates an address resource in the specified project by using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.addresses.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses', 'POST', params);

    /**
     * Deletes the specified address resource.
     * @param {string} params.address - (Required) Name of the address resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.addresses.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses/{address}', 'DELETE', params);

    /**
     * Moves the specified address resource.
     * @param {string} params.address - (Required) Name of the address resource to move.
     * @param {string} params.project - (Required) Source project ID which the Address is moved from.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.addresses.move = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses/{address}/move', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.addresses.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.addresses.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/addresses/{resource}/setLabels', 'POST', params);

    this.images = {};

    /**
     * Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - The zone query parameter.
     * @return {object} The API response object.
     */
    this.images.list = (params) => this._makeRequest('projects/{project}/global/images', 'GET', params);

    /**
     * Returns the specified image.
     * @param {string} params.image - (Required) Name of the image resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.images.get = (params) => this._makeRequest('projects/{project}/global/images/{image}', 'GET', params);

    /**
     * Returns the latest image that is part of an image family and is not deprecated. For more information on image families, see Public image families documentation.
     * @param {string} params.family - (Required) Name of the image family to search for.
     * @param {string} params.project - (Required) The image project that the image belongs to. For example, to get a CentOS image, specify centos-cloud as the image project.
     * @return {object} The API response object.
     */
    this.images.getFromFamily = (params) => this._makeRequest('projects/{project}/global/images/family/{family}', 'GET', params);

    /**
     * Creates an image in the specified project using the data included in the request.
     * @param {boolean} params.forceCreate - Force image creation if true.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.insert = (params) => this._makeRequest('projects/{project}/global/images', 'POST', params);

    /**
     * Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.setLabels = (params) => this._makeRequest('projects/{project}/global/images/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified image.
     * @param {string} params.image - (Required) Name of the image resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.images.delete = (params) => this._makeRequest('projects/{project}/global/images/{image}', 'DELETE', params);

    /**
     * Sets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead.
     * @param {string} params.image - (Required) Image name.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.deprecate = (params) => this._makeRequest('projects/{project}/global/images/{image}/deprecate', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.images.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/images/{resource}/getIamPolicy', 'GET', params);

    /**
     * Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
     * @param {string} params.image - (Required) Name of the image resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.patch = (params) => this._makeRequest('projects/{project}/global/images/{image}', 'PATCH', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/images/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.images.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/images/{resource}/testIamPermissions', 'POST', params);

    this.imageFamilyViews = {};

    /**
     * Returns the latest image that is part of an image family, is not deprecated and is rolled out in the specified zone.
     * @param {string} params.family - (Required) Name of the image family to search for.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.imageFamilyViews.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/imageFamilyViews/{family}', 'GET', params);

    this.snapshots = {};

    /**
     * Retrieves the list of Snapshot resources contained within the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.snapshots.list = (params) => this._makeRequest('projects/{project}/global/snapshots', 'GET', params);

    /**
     * Retrieves an aggregated list of all of the snapshots in your project across all regions and global scope. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.snapshots.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/snapshots', 'GET', params);

    /**
     * Returns the specified Snapshot resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.snapshot - (Required) Name of the Snapshot resource to return.
     * @return {object} The API response object.
     */
    this.snapshots.get = (params) => this._makeRequest('projects/{project}/global/snapshots/{snapshot}', 'GET', params);

    /**
     * Creates a snapshot in the specified project using the data included in the request. For regular snapshot creation, consider using this method instead of disks.createSnapshot, as this method supports more features, such as creating snapshots in a project different from the source disk project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.snapshots.insert = (params) => this._makeRequest('projects/{project}/global/snapshots', 'POST', params);

    /**
     * Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.snapshots.setLabels = (params) => this._makeRequest('projects/{project}/global/snapshots/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.snapshot - (Required) Name of the Snapshot resource to delete.
     * @return {object} The API response object.
     */
    this.snapshots.delete = (params) => this._makeRequest('projects/{project}/global/snapshots/{snapshot}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.snapshots.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/snapshots/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.snapshots.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/snapshots/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.snapshots.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/snapshots/{resource}/testIamPermissions', 'POST', params);

    this.regionSnapshots = {};

    /**
     * Retrieves the list of Snapshot resources contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionSnapshots.list = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots', 'GET', params);

    /**
     * Returns the specified Snapshot resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.snapshot - (Required) Name of the Snapshot resource to return.
     * @return {object} The API response object.
     */
    this.regionSnapshots.get = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{snapshot}', 'GET', params);

    /**
     * Creates a snapshot in the specified region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSnapshots.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots', 'POST', params);

    /**
     * Sets the labels on a regional snapshot. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSnapshots.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.snapshot - (Required) Name of the snapshot resource to delete.
     * @return {object} The API response object.
     */
    this.regionSnapshots.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{snapshot}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.regionSnapshots.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSnapshots.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSnapshots.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshots/{resource}/testIamPermissions', 'POST', params);

    this.disks = {};

    /**
     * Retrieves a list of persistent disks contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.disks.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks', 'GET', params);

    /**
     * Retrieves an aggregated list of persistent disks. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.disks.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/disks', 'GET', params);

    /**
     * Returns the specified persistent disk.
     * @param {string} params.disk - (Required) Name of the persistent disk to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.disks.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}', 'GET', params);

    /**
     * Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceImage - Source image to restore onto a disk. This field is optional.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks', 'POST', params);

    /**
     * Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.setLabels = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{resource}/setLabels', 'POST', params);

    /**
     * Sets the labels on many disks at once. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.bulkSetLabels = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/bulkSetLabels', 'POST', params);

    /**
     * Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
     * @param {string} params.disk - (Required) Name of the persistent disk to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.disks.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}', 'DELETE', params);

    /**
     * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
     * @param {string} params.disk - (Required) Name of the persistent disk to snapshot.
     * @param {boolean} params.guestFlush - [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.createSnapshot = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/createSnapshot', 'POST', params);

    /**
     * Resizes the specified persistent disk. You can only increase the size of the disk.
     * @param {string} params.disk - (Required) The name of the persistent disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.resize = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/resize', 'POST', params);

    /**
     * Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.addResourcePolicies = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies', 'POST', params);

    /**
     * Removes resource policies from a disk.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.removeResourcePolicies = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.disks.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions', 'POST', params);

    /**
     * Updates the specified disk with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.paths - 
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}', 'PATCH', params);

    /**
     * Starts asynchronous replication. Must be invoked on the primary disk.
     * @param {string} params.disk - (Required) The name of the persistent disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.startAsyncReplication = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication', 'POST', params);

    /**
     * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
     * @param {string} params.disk - (Required) The name of the persistent disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.disks.stopAsyncReplication = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication', 'POST', params);

    /**
     * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request. This must be the zone of the primary or secondary disks in the consistency group.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.stopGroupAsyncReplication = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication', 'POST', params);

    /**
     * Bulk create a set of disks.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.disks.bulkInsert = (params) => this._makeRequest('projects/{project}/zones/{zone}/disks/bulkInsert', 'POST', params);

    this.regionDisks = {};

    /**
     * Retrieves the list of persistent disks contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionDisks.list = (params) => this._makeRequest('projects/{project}/regions/{region}/disks', 'GET', params);

    /**
     * Returns a specified regional persistent disk.
     * @param {string} params.disk - (Required) Name of the regional persistent disk to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionDisks.get = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}', 'GET', params);

    /**
     * Creates a persistent regional disk in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceImage - Source image to restore onto a disk. This field is optional.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/disks', 'POST', params);

    /**
     * Sets the labels on the target regional disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
     * @param {string} params.disk - (Required) Name of the regional persistent disk to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionDisks.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}', 'DELETE', params);

    /**
     * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
     * @param {string} params.disk - (Required) Name of the regional persistent disk to snapshot.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.createSnapshot = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/createSnapshot', 'POST', params);

    /**
     * Resizes the specified regional persistent disk.
     * @param {string} params.disk - (Required) Name of the regional persistent disk.
     * @param {string} params.project - (Required) The project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.resize = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/resize', 'POST', params);

    /**
     * Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.addResourcePolicies = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies', 'POST', params);

    /**
     * Removes resource policies from a regional disk.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.removeResourcePolicies = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.regionDisks.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{resource}/testIamPermissions', 'POST', params);

    /**
     * Update the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
     * @param {string} params.disk - (Required) The disk name for this request.
     * @param {string} params.paths - 
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.update = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}', 'PATCH', params);

    /**
     * Starts asynchronous replication. Must be invoked on the primary disk.
     * @param {string} params.disk - (Required) The name of the persistent disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.startAsyncReplication = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication', 'POST', params);

    /**
     * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
     * @param {string} params.disk - (Required) The name of the persistent disk.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionDisks.stopAsyncReplication = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication', 'POST', params);

    /**
     * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request. This must be the region of the primary or secondary disks in the consistency group.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.stopGroupAsyncReplication = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/stopGroupAsyncReplication', 'POST', params);

    /**
     * Bulk create a set of disks.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDisks.bulkInsert = (params) => this._makeRequest('projects/{project}/regions/{region}/disks/bulkInsert', 'POST', params);

    this.firewalls = {};

    /**
     * Retrieves the list of firewall rules available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.firewalls.list = (params) => this._makeRequest('projects/{project}/global/firewalls', 'GET', params);

    /**
     * Returns the specified firewall.
     * @param {string} params.firewall - (Required) Name of the firewall rule to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.firewalls.get = (params) => this._makeRequest('projects/{project}/global/firewalls/{firewall}', 'GET', params);

    /**
     * Creates a firewall rule in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewalls.insert = (params) => this._makeRequest('projects/{project}/global/firewalls', 'POST', params);

    /**
     * Deletes the specified firewall.
     * @param {string} params.firewall - (Required) Name of the firewall rule to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewalls.delete = (params) => this._makeRequest('projects/{project}/global/firewalls/{firewall}', 'DELETE', params);

    /**
     * Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.
     * @param {string} params.firewall - (Required) Name of the firewall rule to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewalls.update = (params) => this._makeRequest('projects/{project}/global/firewalls/{firewall}', 'PUT', params);

    /**
     * Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.firewall - (Required) Name of the firewall rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewalls.patch = (params) => this._makeRequest('projects/{project}/global/firewalls/{firewall}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewalls.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/firewalls/{resource}/testIamPermissions', 'POST', params);

    this.firewallPolicies = {};

    /**
     * Lists all the policies that have been configured for the specified folder or organization.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.parentId - Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.firewallPolicies.list = (params) => this._makeRequest('locations/global/firewallPolicies', 'GET', params);

    /**
     * Returns the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to get.
     * @return {object} The API response object.
     */
    this.firewallPolicies.get = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project using the data included in the request.
     * @param {string} params.parentId - Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.insert = (params) => this._makeRequest('locations/global/firewallPolicies', 'POST', params);

    /**
     * Deletes the specified policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to delete.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewallPolicies.delete = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.patch = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}', 'PATCH', params);

    /**
     * Gets a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {integer} params.priority - The priority of the rule to get from the firewall policy.
     * @return {object} The API response object.
     */
    this.firewallPolicies.getRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/getRule', 'GET', params);

    /**
     * Gets a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {integer} params.priority - The priority of the rule to get from the firewall policy.
     * @return {object} The API response object.
     */
    this.firewallPolicies.getPacketMirroringRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/getPacketMirroringRule', 'GET', params);

    /**
     * Inserts a rule into a firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.addRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/addRule', 'POST', params);

    /**
     * Inserts a packet mirroring rule into a firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.addPacketMirroringRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/addPacketMirroringRule', 'POST', params);

    /**
     * Deletes a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to remove from the firewall policy.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewallPolicies.removeRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/removeRule', 'POST', params);

    /**
     * Deletes a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to remove from the firewall policy.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewallPolicies.removePacketMirroringRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/removePacketMirroringRule', 'POST', params);

    /**
     * Patches a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.patchRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/patchRule', 'POST', params);

    /**
     * Patches a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.patchPacketMirroringRule = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/patchPacketMirroringRule', 'POST', params);

    /**
     * Inserts an association for the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {boolean} params.replaceExistingAssociation - Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association already exists.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.addAssociation = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/addAssociation', 'POST', params);

    /**
     * Removes an association for the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.name - Name for the attachment that will be removed.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewallPolicies.removeAssociation = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/removeAssociation', 'POST', params);

    /**
     * Lists associations of a specified target, i.e., organization or folder.
     * @param {string} params.targetResource - The target resource to list associations. It is an organization, or a folder.
     * @return {object} The API response object.
     */
    this.firewallPolicies.listAssociations = (params) => this._makeRequest('locations/global/firewallPolicies/listAssociations', 'GET', params);

    /**
     * Gets an association with the specified name.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {string} params.name - The name of the association to get from the firewall policy.
     * @return {object} The API response object.
     */
    this.firewallPolicies.getAssociation = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/getAssociation', 'GET', params);

    /**
     * Copies rules to the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceFirewallPolicy - The firewall policy from which to copy rules.
     * @return {object} The API response object.
     */
    this.firewallPolicies.cloneRules = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/cloneRules', 'POST', params);

    /**
     * Moves the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.parentId - The new parent of the firewall policy. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.firewallPolicies.move = (params) => this._makeRequest('locations/global/firewallPolicies/{firewallPolicy}/move', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.firewallPolicies.getIamPolicy = (params) => this._makeRequest('locations/global/firewallPolicies/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.setIamPolicy = (params) => this._makeRequest('locations/global/firewallPolicies/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.firewallPolicies.testIamPermissions = (params) => this._makeRequest('locations/global/firewallPolicies/{resource}/testIamPermissions', 'POST', params);

    this.networkFirewallPolicies = {};

    /**
     * Lists all the policies that have been configured for the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.list = (params) => this._makeRequest('projects/{project}/global/firewallPolicies', 'GET', params);

    /**
     * Returns the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to get.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.get = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.insert = (params) => this._makeRequest('projects/{project}/global/firewallPolicies', 'POST', params);

    /**
     * Deletes the specified policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.delete = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.patch = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}', 'PATCH', params);

    /**
     * Gets a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {integer} params.priority - The priority of the rule to get from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.getRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule', 'GET', params);

    /**
     * Gets a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {integer} params.priority - The priority of the rule to get from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.getPacketMirroringRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/getPacketMirroringRule', 'GET', params);

    /**
     * Inserts a rule into a firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.maxPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {integer} params.minPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.addRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule', 'POST', params);

    /**
     * Inserts a packet mirroring rule into a firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.maxPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {integer} params.minPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.addPacketMirroringRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/addPacketMirroringRule', 'POST', params);

    /**
     * Deletes a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to remove from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.removeRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule', 'POST', params);

    /**
     * Deletes a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to remove from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.removePacketMirroringRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/removePacketMirroringRule', 'POST', params);

    /**
     * Patches a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.patchRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule', 'POST', params);

    /**
     * Patches a packet mirroring rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.patchPacketMirroringRule = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/patchPacketMirroringRule', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{resource}/testIamPermissions', 'POST', params);

    /**
     * Inserts an association for the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.replaceExistingAssociation - Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association already exists.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.addAssociation = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation', 'POST', params);

    /**
     * Removes an association for the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.name - Name for the attachment that will be removed.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.removeAssociation = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation', 'POST', params);

    /**
     * Gets an association with the specified name.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried association belongs.
     * @param {string} params.name - The name of the association to get from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.getAssociation = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation', 'GET', params);

    /**
     * Copies rules to the specified firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceFirewallPolicy - The firewall policy from which to copy rules.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.cloneRules = (params) => this._makeRequest('projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules', 'POST', params);

    /**
     * Retrieves an aggregated list of network firewall policies, listing network firewall policies from all applicable scopes (global and regional) and grouping the results per scope. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.networkFirewallPolicies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/firewallPolicies', 'GET', params);

    this.regionNetworkFirewallPolicies = {};

    /**
     * Lists all the network firewall policies that have been configured for the specified project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies', 'GET', params);

    /**
     * Returns the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to get.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', 'GET', params);

    /**
     * Creates a new network firewall policy in the specified project and region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies', 'POST', params);

    /**
     * Deletes the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', 'DELETE', params);

    /**
     * Patches the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}', 'PATCH', params);

    /**
     * Gets a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried rule belongs.
     * @param {integer} params.priority - The priority of the rule to get from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.getRule = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule', 'GET', params);

    /**
     * Inserts a rule into a network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.maxPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {integer} params.minPriority - When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.addRule = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule', 'POST', params);

    /**
     * Deletes a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to remove from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.removeRule = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule', 'POST', params);

    /**
     * Patches a rule of the specified priority.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.patchRule = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule', 'POST', params);

    /**
     * Copies rules to the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceFirewallPolicy - The firewall policy from which to copy rules.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.cloneRules = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules', 'POST', params);

    /**
     * Gets an association with the specified name.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to which the queried association belongs.
     * @param {string} params.name - The name of the association to get from the firewall policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.getAssociation = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation', 'GET', params);

    /**
     * Inserts an association for the specified network firewall policy.
     * @param {string} params.associatedPolicyToBeReplaced - Name of the firewall policy associated with the target network to swap association with. This field is mutually exclusive with 'replace_existing_association'.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.replaceExistingAssociation - Indicates whether or not to replace it if an association already exists. This is false by default, in which case an error will be returned if an association already exists.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.addAssociation = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation', 'POST', params);

    /**
     * Updates an association for the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.patchAssociation = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchAssociation', 'POST', params);

    /**
     * Removes an association for the specified network firewall policy.
     * @param {string} params.firewallPolicy - (Required) Name of the firewall policy to update.
     * @param {string} params.name - Name for the association that will be removed.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.removeAssociation = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation', 'POST', params);

    /**
     * Returns the effective firewalls on a given network.
     * @param {string} params.network - (Required) Network reference
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.getEffectiveFirewalls = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls', 'GET', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkFirewallPolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions', 'POST', params);

    this.securityPolicies = {};

    /**
     * List all the policies that have been configured for the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.securityPolicies.list = (params) => this._makeRequest('projects/{project}/global/securityPolicies', 'GET', params);

    /**
     * List all of the ordered rules present in a single specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to get.
     * @return {object} The API response object.
     */
    this.securityPolicies.get = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.insert = (params) => this._makeRequest('projects/{project}/global/securityPolicies', 'POST', params);

    /**
     * Deletes the specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to delete.
     * @return {object} The API response object.
     */
    this.securityPolicies.delete = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {string} params.updateMask - Indicates fields to be cleared as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.patch = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}', 'PATCH', params);

    /**
     * Gets a rule at the specified priority.
     * @param {integer} params.priority - The priority of the rule to get from the security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to which the queried rule belongs.
     * @return {object} The API response object.
     */
    this.securityPolicies.getRule = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}/getRule', 'GET', params);

    /**
     * Inserts a rule into a security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.addRule = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}/addRule', 'POST', params);

    /**
     * Deletes a rule at the specified priority.
     * @param {integer} params.priority - The priority of the rule to remove from the security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @return {object} The API response object.
     */
    this.securityPolicies.removeRule = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}/removeRule', 'POST', params);

    /**
     * Patches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {string} params.updateMask - Indicates fields to be cleared as part of this request.
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.patchRule = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{securityPolicy}/patchRule', 'POST', params);

    /**
     * Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.securityPolicies.listPreconfiguredExpressionSets = (params) => this._makeRequest('projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.securityPolicies.setLabels = (params) => this._makeRequest('projects/{project}/global/securityPolicies/{resource}/setLabels', 'POST', params);

    /**
     * Retrieves the list of all SecurityPolicy resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.securityPolicies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/securityPolicies', 'GET', params);

    this.regionSecurityPolicies = {};

    /**
     * List all the policies that have been configured for the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies', 'GET', params);

    /**
     * List all of the ordered rules present in a single specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to get.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies', 'POST', params);

    /**
     * Deletes the specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to delete.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request. To clear fields in the policy, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {string} params.updateMask - Indicates fields to be cleared as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', 'PATCH', params);

    /**
     * Gets a rule at the specified priority.
     * @param {integer} params.priority - The priority of the rule to get from the security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to which the queried rule belongs.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.getRule = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/getRule', 'GET', params);

    /**
     * Inserts a rule into a security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.addRule = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/addRule', 'POST', params);

    /**
     * Deletes a rule at the specified priority.
     * @param {integer} params.priority - The priority of the rule to remove from the security policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.removeRule = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/removeRule', 'POST', params);

    /**
     * Patches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {string} params.updateMask - Indicates fields to be cleared as part of this request.
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.patchRule = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/patchRule', 'POST', params);

    /**
     * Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSecurityPolicies.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/securityPolicies/{resource}/setLabels', 'POST', params);

    this.organizationSecurityPolicies = {};

    /**
     * List all the policies that have been configured for the specified project. Use of this API to read firewall policies is deprecated. Use firewallPolicies.list instead.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.parentId - Parent ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.list = (params) => this._makeRequest('locations/global/securityPolicies', 'GET', params);

    /**
     * List all of the ordered rules present in a single specified policy. Use of this API to read firewall policies is deprecated. Use firewallPolicies.get instead.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to get.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.get = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project using the data included in the request. Use of this API to insert firewall policies is deprecated. Use firewallPolicies.insert instead.
     * @param {string} params.parentId - Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.insert = (params) => this._makeRequest('locations/global/securityPolicies', 'POST', params);

    /**
     * Deletes the specified policy. Use of this API to remove firewall policies is deprecated. Use firewallPolicies.delete instead.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to delete.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.delete = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.patch instead.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.patch = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}', 'PATCH', params);

    /**
     * Gets a rule at the specified priority. Use of this API to read firewall policies is deprecated. Use firewallPolicies.getRule instead.
     * @param {integer} params.priority - The priority of the rule to get from the security policy.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to which the queried rule belongs.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.getRule = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/getRule', 'GET', params);

    /**
     * Inserts a rule into a security policy.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.addRule = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/addRule', 'POST', params);

    /**
     * Deletes a rule at the specified priority.
     * @param {integer} params.priority - The priority of the rule to remove from the security policy.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.removeRule = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/removeRule', 'POST', params);

    /**
     * Patches a rule at the specified priority. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.patchRule instead.
     * @param {integer} params.priority - The priority of the rule to patch.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.patchRule = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/patchRule', 'POST', params);

    /**
     * Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.parentId - Parent ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.listPreconfiguredExpressionSets = (params) => this._makeRequest('locations/global/securityPolicies/listPreconfiguredExpressionSets', 'GET', params);

    /**
     * Inserts an association for the specified security policy. This has billing implications. Projects in the hierarchy with effective hierarchical security policies will be automatically enrolled into Cloud Armor Enterprise if not already enrolled. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.addAssociation instead if possible.
     * @param {boolean} params.replaceExistingAssociation - Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association already exists.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.addAssociation = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/addAssociation', 'POST', params);

    /**
     * Removes an association for the specified security policy. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.removeAssociation instead if possible.
     * @param {string} params.name - Name for the attachment that will be removed.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.removeAssociation = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/removeAssociation', 'POST', params);

    /**
     * Lists associations of a specified target, i.e., organization or folder. Use of this API to read firewall policies is deprecated. Use firewallPolicies.listAssociations instead if possible.
     * @param {string} params.targetResource - The target resource to list associations. It is an organization, or a folder.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.listAssociations = (params) => this._makeRequest('locations/global/securityPolicies/listAssociations', 'GET', params);

    /**
     * Gets an association with the specified name. Use of this API to read firewall policies is deprecated. Use firewallPolicies.getAssociation instead if possible.
     * @param {string} params.name - The name of the association to get from the security policy.
     * @param {string} params.securityPolicy - (Required) Name of the security policy to which the queried rule belongs.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.getAssociation = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/getAssociation', 'GET', params);

    /**
     * Copies rules to the specified security policy. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.copyRules instead.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @param {string} params.sourceSecurityPolicy - The security policy from which to copy rules.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.copyRules = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/copyRules', 'POST', params);

    /**
     * Moves the specified security policy. Use of this API to modify firewall policies is deprecated. Use firewallPolicies.move instead.
     * @param {string} params.parentId - The new parent of the security policy.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.securityPolicy - (Required) Name of the security policy to update.
     * @return {object} The API response object.
     */
    this.organizationSecurityPolicies.move = (params) => this._makeRequest('locations/global/securityPolicies/{securityPolicy}/move', 'POST', params);

    this.instances = {};

    /**
     * Retrieves the list of instances contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.view - View of the instance.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances', 'GET', params);

    /**
     * Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.instances.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/instances', 'GET', params);

    /**
     * Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instance - (Required) Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.listReferrers = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/referrers', 'GET', params);

    /**
     * Returns the specified Instance resource.
     * @param {string} params.instance - (Required) Name of the instance resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.view - View of the instance.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}', 'GET', params);

    /**
     * Creates an instance resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceInstanceTemplate - Specifies instance template to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate
     * @param {string} params.sourceMachineImage - Specifies the machine image to use to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to a machine image: - https://www.googleapis.com/compute/v1/projects/project/global/global /machineImages/machineImage - projects/project/global/global/machineImages/machineImage - global/machineImages/machineImage
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances', 'POST', params);

    /**
     * Deletes the specified Instance resource. For more information, see Deleting an instance.
     * @param {string} params.instance - (Required) Name of the instance resource to delete.
     * @param {boolean} params.noGracefulShutdown - If set to true, Graceful Shutdown is skipped.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}', 'DELETE', params);

    /**
     * Performs a reset on the instance. This is a hard reset. The VM does not do a graceful shutdown. For more information, see Resetting an instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.reset = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/reset', 'POST', params);

    /**
     * Simulates a host maintenance event on a VM. For more information, see Simulate a host maintenance event.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {boolean} params.withExtendedNotifications - Determines whether the customers receive notifications before migration. Only applicable to SF vms.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.simulateMaintenanceEvent = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent', 'POST', params);

    /**
     * Perform a manual maintenance on the instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.performMaintenance = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/performMaintenance', 'POST', params);

    /**
     * Mark the host as faulty and try to restart the instance on a new host.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.reportHostAsFaulty = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/reportHostAsFaulty', 'POST', params);

    /**
     * Adds an access config to an instance's network interface.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.networkInterface - (Required) The name of the network interface to add to this instance.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.addAccessConfig = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig', 'POST', params);

    /**
     * Deletes an access config from an instance's network interface.
     * @param {string} params.accessConfig - (Required) The name of the access config to delete.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.networkInterface - (Required) The name of the network interface.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.deleteAccessConfig = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig', 'POST', params);

    /**
     * Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.networkInterface - (Required) The name of the network interface where the access config is attached.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.updateAccessConfig = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig', 'POST', params);

    /**
     * Adds one dynamic network interface to an active instance.
     * @param {string} params.instance - (Required) The instance name for this request stored as resource_id. Name should conform to RFC1035 or be an unsigned long integer.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.addNetworkInterface = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/addNetworkInterface', 'POST', params);

    /**
     * Deletes one dynamic network interface from an active instance. InstancesDeleteNetworkInterfaceRequest indicates: - instance from which to delete, using project+zone+resource_id fields; - dynamic network interface to be deleted, using network_interface_name field;
     * @param {string} params.instance - (Required) The instance name for this request stored as resource_id. Name should conform to RFC1035 or be an unsigned long integer.
     * @param {string} params.networkInterfaceName - (Required) The name of the dynamic network interface to be deleted from the instance.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.deleteNetworkInterface = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/deleteNetworkInterface', 'POST', params);

    /**
     * Updates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.networkInterface - (Required) The name of the network interface to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.updateNetworkInterface = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface', 'PATCH', params);

    /**
     * Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states. For more information about setting scheduling options for a VM, see Set VM host maintenance policy.
     * @param {string} params.instance - (Required) Instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setScheduling = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setScheduling', 'POST', params);

    /**
     * Returns the last 1 MB of serial port output from the specified instance.
     * @param {string} params.instance - (Required) Name of the instance for this request.
     * @param {integer} params.port - Specifies which COM or serial port to retrieve data from.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.start - Specifies the starting byte position of the output to return. To start with the first byte of output to the specified port, omit this field or set it to `0`. If the output for that byte position is available, this field matches the `start` parameter sent with the request. If the amount of serial console output exceeds the size of the buffer (1 MB), the oldest output is discarded and is no longer available. If the requested start position refers to discarded output, the start position is adjusted to the oldest output still available, and the adjusted start position is returned as the `start` property value. You can also provide a negative start position, which translates to the most recent number of bytes written to the serial port. For example, -3 is interpreted as the most recent 3 bytes written to the serial console. Note that the negative start is bounded by the retained buffer size, and the returned serial console output will not exceed the max buffer size.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getSerialPortOutput = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/serialPort', 'GET', params);

    /**
     * Returns the screenshot from the specified instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getScreenshot = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/screenshot', 'GET', params);

    /**
     * Sends diagnostic interrupt to the instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.sendDiagnosticInterrupt = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt', 'POST', params);

    /**
     * Returns the specified guest attributes entry.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.queryPath - Specifies the guest attributes path to be queried.
     * @param {string} params.variableKey - Specifies the key for the guest attributes entry.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getGuestAttributes = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes', 'GET', params);

    /**
     * Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.
     * @param {boolean} params.forceAttach - Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.attachDisk = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/attachDisk', 'POST', params);

    /**
     * Detaches a disk from an instance.
     * @param {string} params.deviceName - (Required) The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names.
     * @param {string} params.instance - (Required) Instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.detachDisk = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/detachDisk', 'POST', params);

    /**
     * Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setMachineResources = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setMachineResources', 'POST', params);

    /**
     * Changes the machine type for a stopped instance to the machine type specified in the request.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setMachineType = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setMachineType', 'POST', params);

    /**
     * Sets metadata for the specified instance to the data included in the request.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setMetadata = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setMetadata', 'POST', params);

    /**
     * Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setMinCpuPlatform = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform', 'POST', params);

    /**
     * Sets network tags for the specified instance to the data included in the request.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setTags = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setTags', 'POST', params);

    /**
     * Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setLabels = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setLabels', 'POST', params);

    /**
     * Sets name of an instance.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setName = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setName', 'POST', params);

    /**
     * Sets the auto-delete flag for a disk attached to an instance.
     * @param {boolean} params.autoDelete - (Required) Whether to auto-delete the disk when the instance is deleted.
     * @param {string} params.deviceName - (Required) The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.setDiskAutoDelete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete', 'POST', params);

    /**
     * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
     * @param {string} params.instance - (Required) Name of the instance resource to start.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.start = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/start', 'POST', params);

    /**
     * Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.
     * @param {string} params.instance - (Required) Name of the instance resource to start.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.startWithEncryptionKey = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey', 'POST', params);

    /**
     * Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.
     * @param {boolean} params.discardLocalSsd - This property is required if the instance has any attached Local SSD disks. If false, Local SSD data will be preserved when the instance is suspended. If true, the contents of any attached Local SSD disks will be discarded.
     * @param {string} params.instance - (Required) Name of the instance resource to stop.
     * @param {boolean} params.noGracefulShutdown - If set to true, Graceful Shutdown is skipped.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.stop = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/stop', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.
     * @param {string} params.instance - (Required) Name of the instance resource to start.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setServiceAccount = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount', 'POST', params);

    /**
     * Sets deletion protection on the instance.
     * @param {boolean} params.deletionProtection - Whether the resource should be protected against deletion.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.setDeletionProtection = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection', 'POST', params);

    /**
     * This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances have no compute costs (cores or RAM), and incur only storage charges for the saved VM memory and localSSD data. Any charged resources the virtual machine was using, such as persistent disks and static IP addresses, will continue to be charged while the instance is suspended. For more information, see Suspending and resuming an instance.
     * @param {boolean} params.discardLocalSsd - This property is required if the instance has any attached Local SSD disks. If false, Local SSD data will be preserved when the instance is suspended. If true, the contents of any attached Local SSD disks will be discarded.
     * @param {string} params.instance - (Required) Name of the instance resource to suspend.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.suspend = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/suspend', 'POST', params);

    /**
     * Resumes an instance that was suspended using the instances().suspend method.
     * @param {string} params.instance - (Required) Name of the instance resource to resume.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.resume = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/resume', 'POST', params);

    /**
     * Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.addResourcePolicies = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies', 'POST', params);

    /**
     * Removes resource policies from an instance.
     * @param {string} params.instance - (Required) The instance name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.removeResourcePolicies = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies', 'POST', params);

    /**
     * Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of updatable instance properties.
     * @param {string} params.instance - (Required) Name of the instance resource to update.
     * @param {string} params.minimalAction - Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action that the updated properties require.
     * @param {string} params.mostDisruptiveAllowedAction - Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}', 'PUT', params);

    /**
     * Updates the Shielded VM config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.updateShieldedVmConfig = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig', 'PATCH', params);

    /**
     * Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) Name or id of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.updateShieldedInstanceConfig = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig', 'PATCH', params);

    /**
     * Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.updateDisplayDevice = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice', 'PATCH', params);

    /**
     * Sets the Shielded VM integrity policy for a VM instance. You can only use this method on a running VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setShieldedVmIntegrityPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy', 'PATCH', params);

    /**
     * Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.instance - (Required) Name or id of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setShieldedInstanceIntegrityPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy', 'PATCH', params);

    /**
     * Sets the Google Cloud Armor security policy for the specified instance. For more information, see Google Cloud Armor Overview
     * @param {string} params.instance - (Required) Name of the Instance resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.setSecurityPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/setSecurityPolicy', 'POST', params);

    /**
     * Returns the Shielded VM Identity of an instance
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getShieldedVmIdentity = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity', 'GET', params);

    /**
     * Returns the Shielded Instance Identity of an instance
     * @param {string} params.instance - (Required) Name or id of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getShieldedInstanceIdentity = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity', 'GET', params);

    /**
     * Creates multiple instances. Count specifies the number of instances to create. For more information, see About bulk creation of VMs.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.bulkInsert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/bulkInsert', 'POST', params);

    /**
     * Returns effective firewalls applied to an interface of the instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.networkInterface - (Required) The name of the network interface to get the effective firewalls.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getEffectiveFirewalls = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls', 'GET', params);

    /**
     * Patches partner metadata of the specified instance.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instances.patchPartnerMetadata = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/patchPartnerMetadata', 'POST', params);

    /**
     * Gets partner metadata of the specified instance and namespaces.
     * @param {string} params.instance - (Required) Name of the instance scoping this request.
     * @param {string} params.namespaces - Comma separated partner metadata namespaces.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instances.getPartnerMetadata = (params) => this._makeRequest('projects/{project}/zones/{zone}/instances/{instance}/getPartnerMetadata', 'GET', params);

    this.regionInstances = {};

    /**
     * Creates multiple instances in a given region. Count specifies the number of instances to create.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstances.bulkInsert = (params) => this._makeRequest('projects/{project}/regions/{region}/instances/bulkInsert', 'POST', params);

    this.reservations = {};

    /**
     * A list of all the reservations that have been configured for the specified project in specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.reservations.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations', 'GET', params);

    /**
     * Retrieves an aggregated list of reservations. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.reservations.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/reservations', 'GET', params);

    /**
     * Retrieves information about the specified reservation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.reservation - (Required) Name of the reservation to retrieve.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.reservations.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}', 'GET', params);

    /**
     * Creates a new reservation. For more information, read Reserving zonal resources.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations', 'POST', params);

    /**
     * Deletes the specified reservation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservation - (Required) Name of the reservation to delete.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.reservations.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}', 'DELETE', params);

    /**
     * Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservation - (Required) Name of the reservation to update.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.resize = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}/resize', 'POST', params);

    /**
     * Update share settings of the reservation.
     * @param {string} params.paths - 
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservation - (Required) Name of the reservation to update.
     * @param {string} params.updateMask - Update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.reservations.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions', 'POST', params);

    /**
     * Perform maintenance on an extended reservation
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservation - (Required) The name of the reservation. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservations.performMaintenance = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}/performMaintenance', 'POST', params);

    this.instanceGroups = {};

    /**
     * Retrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroups.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups', 'GET', params);

    /**
     * Retrieves the list of instance groups and sorts them by zone. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.instanceGroups.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/instanceGroups', 'GET', params);

    /**
     * Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.
     * @param {string} params.instanceGroup - (Required) The name of the instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroups.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}', 'GET', params);

    /**
     * Creates an instance group in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where you want to create the instance group.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups', 'POST', params);

    /**
     * Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for more information.
     * @param {string} params.instanceGroup - (Required) The name of the instance group to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroups.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}', 'DELETE', params);

    /**
     * Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more information.
     * @param {string} params.instanceGroup - (Required) The name of the instance group where you are adding instances.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.addInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances', 'POST', params);

    /**
     * Removes one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
     * @param {string} params.instanceGroup - (Required) The name of the instance group where the specified instances will be removed.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.removeInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances', 'POST', params);

    /**
     * Lists the instances in the specified instance group. The orderBy query parameter is not supported. The filter query parameter is supported, but only for expressions that use `eq` (equal) or `ne` (not equal) operators.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroup - (Required) The name of the instance group from which you want to generate a list of included instances.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.listInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances', 'POST', params);

    /**
     * Sets the named ports for the specified instance group.
     * @param {string} params.instanceGroup - (Required) The name of the instance group where the named ports are updated.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.setNamedPorts = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions', 'POST', params);

    this.regionInstanceGroups = {};

    /**
     * Retrieves the list of instance group resources contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroups.list = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroups', 'GET', params);

    /**
     * Returns the specified instance group resource.
     * @param {string} params.instanceGroup - (Required) Name of the instance group resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionInstanceGroups.get = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroups/{instanceGroup}', 'GET', params);

    /**
     * Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroup - (Required) Name of the regional instance group for which we want to list the instances.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroups.listInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances', 'POST', params);

    /**
     * Sets the named ports for the specified regional instance group.
     * @param {string} params.instanceGroup - (Required) The name of the regional instance group where the named ports are updated.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroups.setNamedPorts = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions', 'POST', params);

    this.instanceGroupManagers = {};

    /**
     * Retrieves a list of managed instance groups that are contained within the specified project and zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers', 'GET', params);

    /**
     * Retrieves the list of managed instance groups and groups them by zone. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/instanceGroupManagers', 'GET', params);

    /**
     * Returns all of the details about the specified managed instance group.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}', 'GET', params);

    /**
     * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where you want to create the managed instance group.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers', 'POST', params);

    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listManagedInstances method. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * @param {string} params.instanceGroupManager - (Required) The name of the instance group manager.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where you want to create the managed instance group.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}', 'PUT', params);

    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * @param {string} params.instanceGroupManager - (Required) The name of the instance group manager.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where you want to create the managed instance group.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.patch = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}', 'PATCH', params);

    /**
     * Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read Deleting an instance group for more information.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}', 'DELETE', params);

    /**
     * Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.deleteInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays suspension of the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.suspendInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/suspendInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be resumed. This method increases the targetSize and decreases the targetSuspendedSize of the managed instance group by the number of instances that you resume. The resumeInstances operation is marked DONE if the resumeInstances request is successful. The underlying actions take additional time. You must separately verify the status of the RESUMING action with the listmanagedinstances method. In this request, you can only specify instances that are suspended. For example, if an instance was previously suspended using the suspendInstances method, it can be resumed using the resumeInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are resumed. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.resumeInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resumeInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be immediately stopped. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetStoppedSize of the managed instance group by the number of instances that you stop. The stopInstances operation is marked DONE if the stopInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STOPPING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays stopping the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is stopped. Stopped instances can be started using the startInstances method. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.stopInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/stopInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be started. This method increases the targetSize and decreases the targetStoppedSize of the managed instance group by the number of instances that you start. The startInstances operation is marked DONE if the startInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STARTING action with the listmanagedinstances method. In this request, you can only specify instances that are stopped. For example, if an instance was previously stopped using the stopInstances method, it can be started using the startInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are started. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.startInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/startInstances', 'POST', params);

    /**
     * Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.abandonInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances', 'POST', params);

    /**
     * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.recreateInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances', 'POST', params);

    /**
     * Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including: + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance. This list is subject to change. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {integer} params.size - (Required) The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.resize = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize', 'POST', params);

    /**
     * Resizes the managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method. If you increase the size of the instance group, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating, creatingWithoutRetries, or deleting actions with the get or listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.resizeAdvanced = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced', 'POST', params);

    /**
     * Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.setInstanceTemplate = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate', 'POST', params);

    /**
     * Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.setTargetPools = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools', 'POST', params);

    /**
     * Motifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Use instanceGroupManagers.patch instead.
     * @param {string} params.instanceGroupManager - (Required) The name of the instance group manager.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.setAutoHealingPolicies = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies', 'POST', params);

    /**
     * Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.listManagedInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances', 'POST', params);

    /**
     * Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.listErrors = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors', 'GET', params);

    /**
     * Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.listPerInstanceConfigs = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs', 'POST', params);

    /**
     * Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.updatePerInstanceConfigs = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs', 'POST', params);

    /**
     * Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.patchPerInstanceConfigs = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs', 'POST', params);

    /**
     * Deletes selected per-instance configurations for the managed instance group.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.deletePerInstanceConfigs = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs', 'POST', params);

    /**
     * Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group, should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. Should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.applyUpdatesToInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions', 'POST', params);

    /**
     * Creates instances with per-instance configurations in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. It should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagers.createInstances = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances', 'POST', params);

    this.instanceGroupManagerResizeRequests = {};

    /**
     * Returns all of the details about the specified resize request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resizeRequest - (Required) The name of the resize request. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) Name of the href="/compute/docs/regions-zones/#available">zone scoping this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagerResizeRequests.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}', 'GET', params);

    /**
     * Creates a new resize request that starts provisioning VMs immediately or queues VM creation.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group to which the resize request will be added. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located and where the resize request will be created. Name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceGroupManagerResizeRequests.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests', 'POST', params);

    /**
     * Retrieves a list of resize requests that are contained in the managed instance group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. The name should conform to RFC1035.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. The name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagerResizeRequests.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests', 'GET', params);

    /**
     * Cancels the specified resize request and removes it from the queue. Cancelled resize request does no longer wait for the resources to be provisioned. Cancel is only possible for requests that are accepted in the queue.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. The name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resizeRequest - (Required) The name of the resize request to cancel. The name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. The name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagerResizeRequests.cancel = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}/cancel', 'POST', params);

    /**
     * Deletes the specified, inactive resize request. Requests that are still active cannot be deleted. Deleting request does not delete instances that were provisioned previously.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. The name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resizeRequest - (Required) The name of the resize request to delete. The name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) The name of the zone where the managed instance group is located. The name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.instanceGroupManagerResizeRequests.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}', 'DELETE', params);

    this.regionInstanceGroupManagers = {};

    /**
     * Retrieves the list of managed instance groups that are contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.list = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers', 'GET', params);

    /**
     * Returns all of the details about the specified managed instance group.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.get = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', 'GET', params);

    /**
     * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers', 'POST', params);

    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listmanagedinstances method. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * @param {string} params.instanceGroupManager - (Required) The name of the instance group manager.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.update = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', 'PUT', params);

    /**
     * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.
     * @param {string} params.instanceGroupManager - (Required) The name of the instance group manager.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', 'PATCH', params);

    /**
     * Deletes the specified managed instance group and all of the instances in that group.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}', 'DELETE', params);

    /**
     * Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.deleteInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays suspension of the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.suspendInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/suspendInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be resumed. This method increases the targetSize and decreases the targetSuspendedSize of the managed instance group by the number of instances that you resume. The resumeInstances operation is marked DONE if the resumeInstances request is successful. The underlying actions take additional time. You must separately verify the status of the RESUMING action with the listmanagedinstances method. In this request, you can only specify instances that are suspended. For example, if an instance was previously suspended using the suspendInstances method, it can be resumed using the resumeInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are resumed. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.resumeInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resumeInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be immediately stopped. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetStoppedSize of the managed instance group by the number of instances that you stop. The stopInstances operation is marked DONE if the stopInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STOPPING action with the listmanagedinstances method. If the standbyPolicy.initialDelaySec field is set, the group delays stopping the instances until initialDelaySec have passed from instance.creationTimestamp (that is, when the instance was created). This delay gives your application time to set itself up and initialize on the instance. If more than initialDelaySec seconds have passed since instance.creationTimestamp when this method is called, there will be zero delay. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is stopped. Stopped instances can be started using the startInstances method. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.stopInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/stopInstances', 'POST', params);

    /**
     * Flags the specified instances in the managed instance group to be started. This method increases the targetSize and decreases the targetStoppedSize of the managed instance group by the number of instances that you start. The startInstances operation is marked DONE if the startInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STARTING action with the listmanagedinstances method. In this request, you can only specify instances that are stopped. For example, if an instance was previously stopped using the stopInstances method, it can be started using the startInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are started. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.startInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/startInstances', 'POST', params);

    /**
     * Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.abandonInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances', 'POST', params);

    /**
     * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.recreateInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances', 'POST', params);

    /**
     * Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {integer} params.size - (Required) Number of instances that should exist in this instance group manager.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.resize = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize', 'POST', params);

    /**
     * Resizes the regional managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the get or listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It must be a string that meets the requirements in RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request. It must be a string that meets the requirements in RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.resizeAdvanced = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced', 'POST', params);

    /**
     * Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.setInstanceTemplate = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate', 'POST', params);

    /**
     * Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.setTargetPools = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools', 'POST', params);

    /**
     * Modifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Use regionInstanceGroupManagers.patch instead.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.setAutoHealingPolicies = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies', 'POST', params);

    /**
     * Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only if the group's `listManagedInstancesResults` field is set to `PAGINATED`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.listManagedInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances', 'POST', params);

    /**
     * Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern: (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request. This should conform to RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.listErrors = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors', 'GET', params);

    /**
     * Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request, should conform to RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.listPerInstanceConfigs = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs', 'POST', params);

    /**
     * Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request, should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.updatePerInstanceConfigs = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs', 'POST', params);

    /**
     * Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request, should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.patchPerInstanceConfigs = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs', 'POST', params);

    /**
     * Deletes selected per-instance configurations for the managed instance group.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request, should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.deletePerInstanceConfigs = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs', 'POST', params);

    /**
     * Apply updates to selected instances the managed instance group.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group, should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request, should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.applyUpdatesToInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions', 'POST', params);

    /**
     * Creates instances with per-instance configurations in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. It should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the managed instance group is located. It should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagers.createInstances = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances', 'POST', params);

    this.regionInstanceGroupManagerResizeRequests = {};

    /**
     * Returns all of the details about the specified resize request.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region scoping this request. Name should conform to RFC1035.
     * @param {string} params.resizeRequest - (Required) The name of the resize request. Name should conform to RFC1035 or be a resource ID.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagerResizeRequests.get = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}', 'GET', params);

    /**
     * Creates a new Resize Request that starts provisioning VMs immediately or queues VM creation.
     * @param {string} params.instanceGroupManager - (Required) Name of the managed instance group to which the resize request is scoped. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request. Name should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagerResizeRequests.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeRequests', 'POST', params);

    /**
     * Retrieves a list of Resize Requests that are contained in the managed instance group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. The name should conform to RFC1035.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request. Name should conform to RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagerResizeRequests.list = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeRequests', 'GET', params);

    /**
     * Cancels the specified resize request. Cancelled resize request no longer waits for the resources to be provisioned. Cancel is only possible for requests that are in accepted state.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region scoping this request. Name should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resizeRequest - (Required) The name of the resize request to cancel. Name should conform to RFC1035 or be a resource ID.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagerResizeRequests.cancel = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}/cancel', 'POST', params);

    /**
     * Deletes the specified, inactive resize request. Requests that are still active cannot be deleted. Deleting request does not delete instances that were provisioned previously.
     * @param {string} params.instanceGroupManager - (Required) The name of the managed instance group. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region scoping this request. Name should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resizeRequest - (Required) The name of the resize request to delete. Name should conform to RFC1035 or be a resource ID.
     * @return {object} The API response object.
     */
    this.regionInstanceGroupManagerResizeRequests.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}', 'DELETE', params);

    this.autoscalers = {};

    /**
     * Retrieves a list of autoscalers contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.autoscalers.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers', 'GET', params);

    /**
     * Retrieves an aggregated list of autoscalers. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.autoscalers.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/autoscalers', 'GET', params);

    /**
     * Returns the specified autoscaler resource.
     * @param {string} params.autoscaler - (Required) Name of the autoscaler to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.autoscalers.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers/{autoscaler}', 'GET', params);

    /**
     * Creates an autoscaler in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.autoscalers.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers', 'POST', params);

    /**
     * Updates an autoscaler in the specified project using the data included in the request.
     * @param {string} params.autoscaler - Name of the autoscaler to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.autoscalers.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers', 'PUT', params);

    /**
     * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.autoscaler - Name of the autoscaler to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.autoscalers.patch = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers', 'PATCH', params);

    /**
     * Deletes the specified autoscaler.
     * @param {string} params.autoscaler - (Required) Name of the autoscaler to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.autoscalers.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers/{autoscaler}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.autoscalers.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions', 'POST', params);

    this.regionAutoscalers = {};

    /**
     * Retrieves a list of autoscalers contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.list = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers', 'GET', params);

    /**
     * Returns the specified autoscaler.
     * @param {string} params.autoscaler - (Required) Name of the autoscaler to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.get = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers/{autoscaler}', 'GET', params);

    /**
     * Creates an autoscaler in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers', 'POST', params);

    /**
     * Updates an autoscaler in the specified project using the data included in the request.
     * @param {string} params.autoscaler - Name of the autoscaler to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.update = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers', 'PUT', params);

    /**
     * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.autoscaler - Name of the autoscaler to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers', 'PATCH', params);

    /**
     * Deletes the specified autoscaler.
     * @param {string} params.autoscaler - (Required) Name of the autoscaler to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionAutoscalers.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers/{autoscaler}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionAutoscalers.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions', 'POST', params);

    this.backendBuckets = {};

    /**
     * Retrieves the list of BackendBucket resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.backendBuckets.list = (params) => this._makeRequest('projects/{project}/global/backendBuckets', 'GET', params);

    /**
     * Returns the specified BackendBucket resource.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.backendBuckets.get = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}', 'GET', params);

    /**
     * Retrieves a list of all usable backend buckets in the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.backendBuckets.listUsable = (params) => this._makeRequest('projects/{project}/global/backendBuckets/listUsable', 'GET', params);

    /**
     * Creates a BackendBucket resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.insert = (params) => this._makeRequest('projects/{project}/global/backendBuckets', 'POST', params);

    /**
     * Deletes the specified BackendBucket resource.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.backendBuckets.delete = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}', 'DELETE', params);

    /**
     * Updates the specified BackendBucket resource with the data included in the request.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.update = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}', 'PUT', params);

    /**
     * Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.patch = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}', 'PATCH', params);

    /**
     * Adds a key for validating requests with signed URLs for this backend bucket.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.addSignedUrlKey = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey', 'POST', params);

    /**
     * Deletes a key for validating requests with signed URLs for this backend bucket.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035.
     * @param {string} params.keyName - (Required) The name of the Signed URL Key to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.backendBuckets.deleteSignedUrlKey = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey', 'POST', params);

    /**
     * Sets the edge security policy for the specified backend bucket.
     * @param {string} params.backendBucket - (Required) Name of the BackendBucket resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.setEdgeSecurityPolicy = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.backendBuckets.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendBuckets.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/backendBuckets/{resource}/testIamPermissions', 'POST', params);

    this.backendServices = {};

    /**
     * Retrieves the list of BackendService resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.backendServices.list = (params) => this._makeRequest('projects/{project}/global/backendServices', 'GET', params);

    /**
     * Retrieves the list of all BackendService resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.backendServices.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/backendServices', 'GET', params);

    /**
     * Retrieves a list of all usable backend services in the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.backendServices.listUsable = (params) => this._makeRequest('projects/{project}/global/backendServices/listUsable', 'GET', params);

    /**
     * Returns the specified BackendService resource.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.backendServices.get = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}', 'GET', params);

    /**
     * Creates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview .
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.insert = (params) => this._makeRequest('projects/{project}/global/backendServices', 'POST', params);

    /**
     * Deletes the specified BackendService resource.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.backendServices.delete = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}', 'DELETE', params);

    /**
     * Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.update = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}', 'PUT', params);

    /**
     * Patches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.patch = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}', 'PATCH', params);

    /**
     * Adds a key for validating requests with signed URLs for this backend service.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.addSignedUrlKey = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/addSignedUrlKey', 'POST', params);

    /**
     * Deletes a key for validating requests with signed URLs for this backend service.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035.
     * @param {string} params.keyName - (Required) The name of the Signed URL Key to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.backendServices.deleteSignedUrlKey = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey', 'POST', params);

    /**
     * Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.setSecurityPolicy = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/setSecurityPolicy', 'POST', params);

    /**
     * Sets the edge security policy for the specified backend service.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the edge security policy should be set. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.setEdgeSecurityPolicy = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy', 'POST', params);

    /**
     * Returns effective security policies applied to this backend service.
     * @param {string} params.backendService - (Required) Name of the Backend Service for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.backendServices.getEffectiveSecurityPolicies = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/getEffectiveSecurityPolicies', 'GET', params);

    /**
     * Gets the most recent health check results for this BackendService. Example request body: { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" }
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the queried instance belongs.
     * @param {string} params.project - (Required)
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.getHealth = (params) => this._makeRequest('projects/{project}/global/backendServices/{backendService}/getHealth', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.backendServices.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/backendServices/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/backendServices/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.backendServices.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/backendServices/{resource}/testIamPermissions', 'POST', params);

    this.regionBackendServices = {};

    /**
     * Retrieves the list of regional BackendService resources available to the specified project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionBackendServices.list = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices', 'GET', params);

    /**
     * Retrieves a list of all usable backend services in the specified project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request. It must be a string that meets the requirements in RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionBackendServices.listUsable = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/listUsable', 'GET', params);

    /**
     * Returns the specified regional BackendService resource.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionBackendServices.get = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}', 'GET', params);

    /**
     * Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices', 'POST', params);

    /**
     * Deletes the specified regional BackendService resource.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionBackendServices.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}', 'DELETE', params);

    /**
     * Updates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview .
     * @param {string} params.backendService - (Required) Name of the BackendService resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.update = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}', 'PUT', params);

    /**
     * Updates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.backendService - (Required) Name of the BackendService resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}', 'PATCH', params);

    /**
     * Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview
     * @param {string} params.backendService - (Required) Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.setSecurityPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy', 'POST', params);

    /**
     * Gets the most recent health check results for this regional BackendService.
     * @param {string} params.backendService - (Required) Name of the BackendService resource for which to get health.
     * @param {string} params.project - (Required)
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.getHealth = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{backendService}/getHealth', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.regionBackendServices.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionBackendServices.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions', 'POST', params);

    this.advice = {};

    /**
     * Advise how, where and when to create the requested amount of instances with specified accelerators, within the specified time and location limits. The method recommends creating future reservations for the requested resources.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.advice.calendarMode = (params) => this._makeRequest('projects/{project}/regions/{region}/advice/calendarMode', 'POST', params);

    this.regionCommitments = {};

    /**
     * Retrieves a list of commitments contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionCommitments.list = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments', 'GET', params);

    /**
     * Retrieves an aggregated list of commitments by region. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.regionCommitments.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/commitments', 'GET', params);

    /**
     * Returns the specified commitment resource.
     * @param {string} params.commitment - (Required) Name of the commitment to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionCommitments.get = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments/{commitment}', 'GET', params);

    /**
     * Creates a commitment in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionCommitments.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments', 'POST', params);

    /**
     * Transfers GPUs or Local SSD disks between reservations that are attached to the same commitment.
     * @param {string} params.commitment - (Required) Name of the commitment for which the reservations are being updated.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionCommitments.updateReservations = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments/{commitment}/updateReservations', 'POST', params);

    /**
     * Updates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be updated: auto_renew and plan.
     * @param {string} params.commitment - (Required) Name of the commitment that you want to update.
     * @param {string} params.paths - 
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionCommitments.update = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments/{commitment}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionCommitments.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions', 'POST', params);

    this.crossSiteNetworks = {};

    /**
     * Lists the cross-site networks for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.crossSiteNetworks.list = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks', 'GET', params);

    /**
     * Returns the specified cross-site network in the given scope.
     * @param {string} params.crossSiteNetwork - (Required) Name of the cross-site network to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.crossSiteNetworks.get = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}', 'GET', params);

    /**
     * Creates a cross-site network in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {boolean} params.validateOnly - [Input Only] Validate the new configuration, but don't create it.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.crossSiteNetworks.insert = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks', 'POST', params);

    /**
     * Deletes the specified cross-site network in the given scope.
     * @param {string} params.crossSiteNetwork - (Required) Name of the cross-site network to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @return {object} The API response object.
     */
    this.crossSiteNetworks.delete = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}', 'DELETE', params);

    /**
     * Updates the specified cross-site network with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.crossSiteNetwork - (Required) Name of the cross-site network to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {boolean} params.validateOnly - [Input Only] Validate the new configuration, but don't update it.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.crossSiteNetworks.patch = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}', 'PATCH', params);

    this.diskTypes = {};

    /**
     * Retrieves a list of disk types available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.diskTypes.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/diskTypes', 'GET', params);

    /**
     * Retrieves an aggregated list of disk types. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.diskTypes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/diskTypes', 'GET', params);

    /**
     * Returns the specified disk type.
     * @param {string} params.diskType - (Required) Name of the disk type to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.diskTypes.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/diskTypes/{diskType}', 'GET', params);

    this.regionDiskTypes = {};

    /**
     * Retrieves a list of regional disk types available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionDiskTypes.list = (params) => this._makeRequest('projects/{project}/regions/{region}/diskTypes', 'GET', params);

    /**
     * Returns the specified regional disk type.
     * @param {string} params.diskType - (Required) Name of the disk type to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionDiskTypes.get = (params) => this._makeRequest('projects/{project}/regions/{region}/diskTypes/{diskType}', 'GET', params);

    this.diskSettings = {};

    /**
     * Get Zonal Disk Settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.diskSettings.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/diskSettings', 'GET', params);

    /**
     * Patch Zonal Disk Settings
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.diskSettings.patch = (params) => this._makeRequest('projects/{project}/zones/{zone}/diskSettings', 'PATCH', params);

    this.regionDiskSettings = {};

    /**
     * Get Regional Disk Settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionDiskSettings.get = (params) => this._makeRequest('projects/{project}/regions/{region}/diskSettings', 'GET', params);

    /**
     * Patch Regional Disk Settings
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionDiskSettings.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/diskSettings', 'PATCH', params);

    this.interconnectAttachments = {};

    /**
     * Retrieves the list of interconnect attachments contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.list = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments', 'GET', params);

    /**
     * Retrieves an aggregated list of interconnect attachments. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/interconnectAttachments', 'GET', params);

    /**
     * Returns the specified interconnect attachment.
     * @param {string} params.interconnectAttachment - (Required) Name of the interconnect attachment to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.get = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', 'GET', params);

    /**
     * Creates an InterconnectAttachment in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments', 'POST', params);

    /**
     * Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.interconnectAttachment - (Required) Name of the interconnect attachment to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', 'PATCH', params);

    /**
     * Deletes the specified interconnect attachment.
     * @param {string} params.interconnectAttachment - (Required) Name of the interconnect attachment to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.interconnectAttachments.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachments.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels', 'POST', params);

    this.interconnectAttachmentGroups = {};

    /**
     * Lists the InterconnectAttachmentGroups for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.list = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups', 'GET', params);

    /**
     * Returns the specified InterconnectAttachmentGroup resource in the given scope.
     * @param {string} params.interconnectAttachmentGroup - (Required) Name of the InterconnectAttachmentGroup resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.get = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{interconnectAttachmentGroup}', 'GET', params);

    /**
     * Creates a InterconnectAttachmentGroup in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.insert = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups', 'POST', params);

    /**
     * Deletes the specified InterconnectAttachmentGroup in the given scope
     * @param {string} params.interconnectAttachmentGroup - (Required) Name of the InterconnectAttachmentGroup resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.delete = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{interconnectAttachmentGroup}', 'DELETE', params);

    /**
     * Patches the specified InterconnectAttachmentGroup resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.interconnectAttachmentGroup - (Required) Name of the InterconnectAttachmentGroup resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {string} params.updateMask - The list of fields to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.patch = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{interconnectAttachmentGroup}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{resource}/testIamPermissions', 'POST', params);

    /**
     * Returns the InterconnectAttachmentStatuses for the specified InterconnectAttachmentGroup resource.
     * @param {string} params.interconnectAttachmentGroup - (Required) Name of the interconnectAttachmentGroup resource to query.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectAttachmentGroups.getOperationalStatus = (params) => this._makeRequest('projects/{project}/global/interconnectAttachmentGroups/{interconnectAttachmentGroup}/getOperationalStatus', 'GET', params);

    this.interconnects = {};

    /**
     * Creates an Interconnect in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnects.insert = (params) => this._makeRequest('projects/{project}/global/interconnects', 'POST', params);

    /**
     * Retrieves the list of Interconnects available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnects.list = (params) => this._makeRequest('projects/{project}/global/interconnects', 'GET', params);

    /**
     * Returns the interconnectDiagnostics for the specified Interconnect. In the event of a global outage, do not use this API to make decisions about where to redirect your network traffic. Unlike a VLAN attachment, which is regional, a Cloud Interconnect connection is a global resource. A global outage can prevent this API from functioning properly.
     * @param {string} params.interconnect - (Required) Name of the interconnect resource to query.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnects.getDiagnostics = (params) => this._makeRequest('projects/{project}/global/interconnects/{interconnect}/getDiagnostics', 'GET', params);

    /**
     * Returns the interconnectMacsecConfig for the specified Interconnect.
     * @param {string} params.interconnect - (Required) Name of the interconnect resource to query.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnects.getMacsecConfig = (params) => this._makeRequest('projects/{project}/global/interconnects/{interconnect}/getMacsecConfig', 'GET', params);

    /**
     * Returns the specified Interconnect. Get a list of available Interconnects by making a list() request.
     * @param {string} params.interconnect - (Required) Name of the interconnect to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnects.get = (params) => this._makeRequest('projects/{project}/global/interconnects/{interconnect}', 'GET', params);

    /**
     * Deletes the specified Interconnect.
     * @param {string} params.interconnect - (Required) Name of the interconnect to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.interconnects.delete = (params) => this._makeRequest('projects/{project}/global/interconnects/{interconnect}', 'DELETE', params);

    /**
     * Updates the specified Interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.interconnect - (Required) Name of the interconnect to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnects.patch = (params) => this._makeRequest('projects/{project}/global/interconnects/{interconnect}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnects.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/interconnects/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnects.setLabels = (params) => this._makeRequest('projects/{project}/global/interconnects/{resource}/setLabels', 'POST', params);

    this.interconnectGroups = {};

    /**
     * Lists the InterconnectGroups for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnectGroups.list = (params) => this._makeRequest('projects/{project}/global/interconnectGroups', 'GET', params);

    /**
     * Returns the specified InterconnectGroup resource in the given scope.
     * @param {string} params.interconnectGroup - (Required) Name of the InterconnectGroup resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectGroups.get = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{interconnectGroup}', 'GET', params);

    /**
     * Creates a InterconnectGroup in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectGroups.insert = (params) => this._makeRequest('projects/{project}/global/interconnectGroups', 'POST', params);

    /**
     * Deletes the specified InterconnectGroup in the given scope
     * @param {string} params.interconnectGroup - (Required) Name of the InterconnectGroup resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @return {object} The API response object.
     */
    this.interconnectGroups.delete = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{interconnectGroup}', 'DELETE', params);

    /**
     * Patches the specified InterconnectGroup resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.interconnectGroup - (Required) Name of the InterconnectGroup resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {string} params.updateMask - The list of fields to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectGroups.patch = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{interconnectGroup}', 'PATCH', params);

    /**
     * Returns the interconnectStatuses for the specified InterconnectGroup.
     * @param {string} params.interconnectGroup - (Required) Name of the interconnectGroup resource to query.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectGroups.getOperationalStatus = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{interconnectGroup}/getOperationalStatus', 'GET', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.interconnectGroups.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectGroups.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{resource}/testIamPermissions', 'POST', params);

    /**
     * Create Interconnects with redundancy by creating them in a specified interconnect group.
     * @param {string} params.interconnectGroup - (Required) Name of the group resource to create members for.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.interconnectGroups.createMembers = (params) => this._makeRequest('projects/{project}/global/interconnectGroups/{interconnectGroup}/createMembers', 'POST', params);

    this.externalVpnGateways = {};

    /**
     * Creates a ExternalVpnGateway in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.externalVpnGateways.insert = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways', 'POST', params);

    /**
     * Retrieves the list of ExternalVpnGateway available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.externalVpnGateways.list = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways', 'GET', params);

    /**
     * Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.
     * @param {string} params.externalVpnGateway - (Required) Name of the externalVpnGateway to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.externalVpnGateways.get = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways/{externalVpnGateway}', 'GET', params);

    /**
     * Deletes the specified externalVpnGateway.
     * @param {string} params.externalVpnGateway - (Required) Name of the externalVpnGateways to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.externalVpnGateways.delete = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways/{externalVpnGateway}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.externalVpnGateways.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.externalVpnGateways.setLabels = (params) => this._makeRequest('projects/{project}/global/externalVpnGateways/{resource}/setLabels', 'POST', params);

    this.globalForwardingRules = {};

    /**
     * Retrieves a list of GlobalForwardingRule resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.list = (params) => this._makeRequest('projects/{project}/global/forwardingRules', 'GET', params);

    /**
     * Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.get = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{forwardingRule}', 'GET', params);

    /**
     * Creates a GlobalForwardingRule resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.insert = (params) => this._makeRequest('projects/{project}/global/forwardingRules', 'POST', params);

    /**
     * Deletes the specified GlobalForwardingRule resource.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.globalForwardingRules.delete = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{forwardingRule}', 'DELETE', params);

    /**
     * Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource in which target is to be set.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.setTarget = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{forwardingRule}/setTarget', 'POST', params);

    /**
     * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.patch = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{forwardingRule}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on the specified resource. To learn more about labels, read the Labeling resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalForwardingRules.setLabels = (params) => this._makeRequest('projects/{project}/global/forwardingRules/{resource}/setLabels', 'POST', params);

    this.forwardingRules = {};

    /**
     * Retrieves a list of ForwardingRule resources available to the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.forwardingRules.list = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules', 'GET', params);

    /**
     * Retrieves an aggregated list of forwarding rules. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.forwardingRules.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/forwardingRules', 'GET', params);

    /**
     * Returns the specified ForwardingRule resource.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.forwardingRules.get = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', 'GET', params);

    /**
     * Creates a ForwardingRule resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.forwardingRules.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules', 'POST', params);

    /**
     * Deletes the specified ForwardingRule resource.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.forwardingRules.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', 'DELETE', params);

    /**
     * Changes target URL for forwarding rule. The new target should be of the same type as the old target.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource in which target is to be set.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.forwardingRules.setTarget = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget', 'POST', params);

    /**
     * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.
     * @param {string} params.forwardingRule - (Required) Name of the ForwardingRule resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.forwardingRules.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{forwardingRule}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.forwardingRules.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.forwardingRules.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels', 'POST', params);

    this.futureReservations = {};

    /**
     * Creates a new Future Reservation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.futureReservations.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations', 'POST', params);

    /**
     * Retrieves information about the specified future reservation.
     * @param {string} params.futureReservation - (Required) Name of the future reservation to retrieve. Name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.futureReservations.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations/{futureReservation}', 'GET', params);

    /**
     * Deletes the specified future reservation.
     * @param {string} params.futureReservation - (Required) Name of the future reservation to retrieve. Name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.futureReservations.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations/{futureReservation}', 'DELETE', params);

    /**
     * A list of all the future reservations that have been configured for the specified project in specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.futureReservations.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations', 'GET', params);

    /**
     * Retrieves an aggregated list of future reservations. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.futureReservations.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/futureReservations', 'GET', params);

    /**
     * Updates the specified future reservation.
     * @param {string} params.futureReservation - (Required) Name of the reservation to update. Name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.futureReservations.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations/{futureReservation}', 'PATCH', params);

    /**
     * Cancel the specified future reservation.
     * @param {string} params.futureReservation - (Required) Name of the future reservation to retrieve. Name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.futureReservations.cancel = (params) => this._makeRequest('projects/{project}/zones/{zone}/futureReservations/{futureReservation}/cancel', 'POST', params);

    this.regionHealthCheckServices = {};

    /**
     * Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.list = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices', 'GET', params);

    /**
     * Returns the specified regional HealthCheckService resource.
     * @param {string} params.healthCheckService - (Required) Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.get = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', 'GET', params);

    /**
     * Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices', 'POST', params);

    /**
     * Deletes the specified regional HealthCheckService.
     * @param {string} params.healthCheckService - (Required) Name of the HealthCheckService to delete. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', 'DELETE', params);

    /**
     * Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.healthCheckService - (Required) Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthCheckServices.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions', 'POST', params);

    this.healthChecks = {};

    /**
     * Retrieves the list of HealthCheck resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.healthChecks.list = (params) => this._makeRequest('projects/{project}/global/healthChecks', 'GET', params);

    /**
     * Retrieves the list of all HealthCheck resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.healthChecks.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/healthChecks', 'GET', params);

    /**
     * Returns the specified HealthCheck resource.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.healthChecks.get = (params) => this._makeRequest('projects/{project}/global/healthChecks/{healthCheck}', 'GET', params);

    /**
     * Creates a HealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.healthChecks.insert = (params) => this._makeRequest('projects/{project}/global/healthChecks', 'POST', params);

    /**
     * Deletes the specified HealthCheck resource.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.healthChecks.delete = (params) => this._makeRequest('projects/{project}/global/healthChecks/{healthCheck}', 'DELETE', params);

    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.healthChecks.update = (params) => this._makeRequest('projects/{project}/global/healthChecks/{healthCheck}', 'PUT', params);

    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.healthChecks.patch = (params) => this._makeRequest('projects/{project}/global/healthChecks/{healthCheck}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.healthChecks.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/healthChecks/{resource}/testIamPermissions', 'POST', params);

    this.regionHealthChecks = {};

    /**
     * Retrieves the list of HealthCheck resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.list = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks', 'GET', params);

    /**
     * Returns the specified HealthCheck resource.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.get = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks/{healthCheck}', 'GET', params);

    /**
     * Creates a HealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks', 'POST', params);

    /**
     * Deletes the specified HealthCheck resource.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionHealthChecks.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks/{healthCheck}', 'DELETE', params);

    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.update = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks/{healthCheck}', 'PUT', params);

    /**
     * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.healthCheck - (Required) Name of the HealthCheck resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks/{healthCheck}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionHealthChecks.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions', 'POST', params);

    this.httpHealthChecks = {};

    /**
     * Retrieves the list of HttpHealthCheck resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.list = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks', 'GET', params);

    /**
     * Returns the specified HttpHealthCheck resource.
     * @param {string} params.httpHealthCheck - (Required) Name of the HttpHealthCheck resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.get = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks/{httpHealthCheck}', 'GET', params);

    /**
     * Creates a HttpHealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.insert = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks', 'POST', params);

    /**
     * Deletes the specified HttpHealthCheck resource.
     * @param {string} params.httpHealthCheck - (Required) Name of the HttpHealthCheck resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.httpHealthChecks.delete = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks/{httpHealthCheck}', 'DELETE', params);

    /**
     * Updates a HttpHealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.httpHealthCheck - (Required) Name of the HttpHealthCheck resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.update = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks/{httpHealthCheck}', 'PUT', params);

    /**
     * Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.httpHealthCheck - (Required) Name of the HttpHealthCheck resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.patch = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks/{httpHealthCheck}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpHealthChecks.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions', 'POST', params);

    this.httpsHealthChecks = {};

    /**
     * Retrieves the list of HttpsHealthCheck resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.list = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks', 'GET', params);

    /**
     * Returns the specified HttpsHealthCheck resource.
     * @param {string} params.httpsHealthCheck - (Required) Name of the HttpsHealthCheck resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.get = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', 'GET', params);

    /**
     * Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.insert = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks', 'POST', params);

    /**
     * Deletes the specified HttpsHealthCheck resource.
     * @param {string} params.httpsHealthCheck - (Required) Name of the HttpsHealthCheck resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.delete = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', 'DELETE', params);

    /**
     * Updates a HttpsHealthCheck resource in the specified project using the data included in the request.
     * @param {string} params.httpsHealthCheck - (Required) Name of the HttpsHealthCheck resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.update = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', 'PUT', params);

    /**
     * Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.httpsHealthCheck - (Required) Name of the HttpsHealthCheck resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.patch = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.httpsHealthChecks.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions', 'POST', params);

    this.instanceTemplates = {};

    /**
     * Retrieves a list of instance templates that are contained within the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.view - View of the instance template.
     * @return {object} The API response object.
     */
    this.instanceTemplates.list = (params) => this._makeRequest('projects/{project}/global/instanceTemplates', 'GET', params);

    /**
     * Returns the specified instance template.
     * @param {string} params.instanceTemplate - (Required) The name of the instance template.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.view - View of the instance template.
     * @return {object} The API response object.
     */
    this.instanceTemplates.get = (params) => this._makeRequest('projects/{project}/global/instanceTemplates/{instanceTemplate}', 'GET', params);

    /**
     * Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceTemplates.insert = (params) => this._makeRequest('projects/{project}/global/instanceTemplates', 'POST', params);

    /**
     * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.
     * @param {string} params.instanceTemplate - (Required) The name of the instance template to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.instanceTemplates.delete = (params) => this._makeRequest('projects/{project}/global/instanceTemplates/{instanceTemplate}', 'DELETE', params);

    /**
     * Retrieves the list of all InstanceTemplates resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.instanceTemplates.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/instanceTemplates', 'GET', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.instanceTemplates.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/instanceTemplates/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceTemplates.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/instanceTemplates/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceTemplates.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/instanceTemplates/{resource}/testIamPermissions', 'POST', params);

    this.regionInstanceTemplates = {};

    /**
     * Retrieves a list of instance templates that are contained within the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the regions for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.view - View of the instance template.
     * @return {object} The API response object.
     */
    this.regionInstanceTemplates.list = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceTemplates', 'GET', params);

    /**
     * Returns the specified instance template.
     * @param {string} params.instanceTemplate - (Required) The name of the instance template.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.view - View of the instance template.
     * @return {object} The API response object.
     */
    this.regionInstanceTemplates.get = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}', 'GET', params);

    /**
     * Creates an instance template in the specified project and region using the global instance template whose URL is included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstanceTemplates.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceTemplates', 'POST', params);

    /**
     * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone.
     * @param {string} params.instanceTemplate - (Required) The name of the instance template to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionInstanceTemplates.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}', 'DELETE', params);

    this.instanceSettings = {};

    /**
     * Get Instance settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instanceSettings.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceSettings', 'GET', params);

    /**
     * Patch Instance settings
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) The zone scoping this request. It should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instanceSettings.patch = (params) => this._makeRequest('projects/{project}/zones/{zone}/instanceSettings', 'PATCH', params);

    this.instantSnapshots = {};

    /**
     * Retrieves the list of InstantSnapshot resources contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instantSnapshots.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots', 'GET', params);

    /**
     * Returns the specified InstantSnapshot resource in the specified zone.
     * @param {string} params.instantSnapshot - (Required) Name of the InstantSnapshot resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instantSnapshots.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}', 'GET', params);

    /**
     * Creates an instant snapshot in the specified zone.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instantSnapshots.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots', 'POST', params);

    /**
     * Sets the labels on a instantSnapshot in the given zone. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instantSnapshots.setLabels = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.
     * @param {string} params.instantSnapshot - (Required) Name of the InstantSnapshot resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instantSnapshots.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.instantSnapshots.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instantSnapshots.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.instantSnapshots.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions', 'POST', params);

    /**
     * Retrieves an aggregated list of instantSnapshots. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.instantSnapshots.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/instantSnapshots', 'GET', params);

    this.regionInstantSnapshots = {};

    /**
     * Retrieves the list of InstantSnapshot resources contained within the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.list = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots', 'GET', params);

    /**
     * Returns the specified InstantSnapshot resource in the specified region.
     * @param {string} params.instantSnapshot - (Required) Name of the InstantSnapshot resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.get = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}', 'GET', params);

    /**
     * Creates an instant snapshot in the specified region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots', 'POST', params);

    /**
     * Sets the labels on a instantSnapshot in the given region. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.
     * @param {string} params.instantSnapshot - (Required) Name of the InstantSnapshot resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionInstantSnapshots.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions', 'POST', params);

    this.interconnectLocations = {};

    /**
     * Retrieves the list of interconnect locations available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnectLocations.list = (params) => this._makeRequest('projects/{project}/global/interconnectLocations', 'GET', params);

    /**
     * Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.
     * @param {string} params.interconnectLocation - (Required) Name of the interconnect location to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectLocations.get = (params) => this._makeRequest('projects/{project}/global/interconnectLocations/{interconnectLocation}', 'GET', params);

    this.interconnectRemoteLocations = {};

    /**
     * Retrieves the list of interconnect remote locations available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.interconnectRemoteLocations.list = (params) => this._makeRequest('projects/{project}/global/interconnectRemoteLocations', 'GET', params);

    /**
     * Returns the details for the specified interconnect remote location. Gets a list of available interconnect remote locations by making a list() request.
     * @param {string} params.interconnectRemoteLocation - (Required) Name of the interconnect remote location to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.interconnectRemoteLocations.get = (params) => this._makeRequest('projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}', 'GET', params);

    this.licenseCodes = {};

    /**
     * Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.licenseCode - (Required) Number corresponding to the License code resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.licenseCodes.get = (params) => this._makeRequest('projects/{project}/global/licenseCodes/{licenseCode}', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.licenseCodes.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/licenseCodes/{resource}/testIamPermissions', 'POST', params);

    this.licenses = {};

    /**
     * Returns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.license - (Required) Name of the License resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.licenses.get = (params) => this._makeRequest('projects/{project}/global/licenses/{license}', 'GET', params);

    /**
     * Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.licenses.list = (params) => this._makeRequest('projects/{project}/global/licenses', 'GET', params);

    /**
     * Deletes the specified license. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.license - (Required) Name of the license resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.licenses.delete = (params) => this._makeRequest('projects/{project}/global/licenses/{license}', 'DELETE', params);

    /**
     * Create a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.licenses.insert = (params) => this._makeRequest('projects/{project}/global/licenses', 'POST', params);

    /**
     * Updates a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.license - (Required) The license name for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.licenses.update = (params) => this._makeRequest('projects/{project}/global/licenses/{license}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.licenses.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/licenses/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.licenses.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/licenses/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.licenses.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/licenses/{resource}/testIamPermissions', 'POST', params);

    this.machineImages = {};

    /**
     * Retrieves a list of machine images that are contained within the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.machineImages.list = (params) => this._makeRequest('projects/{project}/global/machineImages', 'GET', params);

    /**
     * Returns the specified machine image.
     * @param {string} params.machineImage - (Required) The name of the machine image.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.machineImages.get = (params) => this._makeRequest('projects/{project}/global/machineImages/{machineImage}', 'GET', params);

    /**
     * Creates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new machine image should use the same network or, if applicable, the same subnetwork as the original instance.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sourceInstance - Required. Source instance that is used to create the machine image from.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.machineImages.insert = (params) => this._makeRequest('projects/{project}/global/machineImages', 'POST', params);

    /**
     * Sets the labels on a machine image. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.machineImages.setLabels = (params) => this._makeRequest('projects/{project}/global/machineImages/{resource}/setLabels', 'POST', params);

    /**
     * Deletes the specified machine image. Deleting a machine image is permanent and cannot be undone.
     * @param {string} params.machineImage - (Required) The name of the machine image to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.machineImages.delete = (params) => this._makeRequest('projects/{project}/global/machineImages/{machineImage}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.machineImages.getIamPolicy = (params) => this._makeRequest('projects/{project}/global/machineImages/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.machineImages.setIamPolicy = (params) => this._makeRequest('projects/{project}/global/machineImages/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.machineImages.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/machineImages/{resource}/testIamPermissions', 'POST', params);

    this.machineTypes = {};

    /**
     * Retrieves a list of machine types available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.machineTypes.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/machineTypes', 'GET', params);

    /**
     * Retrieves an aggregated list of machine types. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.machineTypes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/machineTypes', 'GET', params);

    /**
     * Returns the specified machine type.
     * @param {string} params.machineType - (Required) Name of the machine type to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.machineTypes.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/machineTypes/{machineType}', 'GET', params);

    this.regionMultiMigs = {};

    /**
     * Retrieves a list of multi-MIGs in a project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionMultiMigs.list = (params) => this._makeRequest('projects/{project}/regions/{region}/multiMigs', 'GET', params);

    /**
     * Returns all the details of a specific multi-MIG.
     * @param {string} params.multiMig - (Required) Name of the multi-MIG resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionMultiMigs.get = (params) => this._makeRequest('projects/{project}/regions/{region}/multiMigs/{multiMig}', 'GET', params);

    /**
     * Creates a multi-MIG in the specified project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents you from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionMultiMigs.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/multiMigs', 'POST', params);

    /**
     * Deletes a multi-MIG in the specified project.
     * @param {string} params.multiMig - (Required) Name of the multi-MIG to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionMultiMigs.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/multiMigs/{multiMig}', 'DELETE', params);

    this.networkAttachments = {};

    /**
     * Retrieves the list of all NetworkAttachment resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.networkAttachments.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/networkAttachments', 'GET', params);

    /**
     * Lists the NetworkAttachments for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.networkAttachments.list = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments', 'GET', params);

    /**
     * Returns the specified NetworkAttachment resource in the given scope.
     * @param {string} params.networkAttachment - (Required) Name of the NetworkAttachment resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @return {object} The API response object.
     */
    this.networkAttachments.get = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', 'GET', params);

    /**
     * Creates a NetworkAttachment in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkAttachments.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments', 'POST', params);

    /**
     * Deletes the specified NetworkAttachment in the given scope
     * @param {string} params.networkAttachment - (Required) Name of the NetworkAttachment resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @return {object} The API response object.
     */
    this.networkAttachments.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', 'DELETE', params);

    /**
     * Patches the specified NetworkAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.networkAttachment - (Required) Name of the NetworkAttachment resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkAttachments.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{networkAttachment}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.networkAttachments.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkAttachments.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkAttachments.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/networkAttachments/{resource}/testIamPermissions', 'POST', params);

    this.networkEdgeSecurityServices = {};

    /**
     * Gets a specified NetworkEdgeSecurityService.
     * @param {string} params.networkEdgeSecurityService - (Required) Name of the network edge security service to get.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.networkEdgeSecurityServices.get = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', 'GET', params);

    /**
     * Creates a new service in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {boolean} params.validateOnly - If true, the request will not be committed.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEdgeSecurityServices.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEdgeSecurityServices', 'POST', params);

    /**
     * Deletes the specified service.
     * @param {string} params.networkEdgeSecurityService - (Required) Name of the network edge security service to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networkEdgeSecurityServices.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', 'DELETE', params);

    /**
     * Patches the specified policy with the data included in the request.
     * @param {string} params.networkEdgeSecurityService - (Required) Name of the network edge security service to update.
     * @param {string} params.paths - 
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - Indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEdgeSecurityServices.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}', 'PATCH', params);

    /**
     * Retrieves the list of all NetworkEdgeSecurityService resources available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.networkEdgeSecurityServices.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/networkEdgeSecurityServices', 'GET', params);

    this.networkEndpointGroups = {};

    /**
     * Retrieves the list of network endpoint groups that are located in the specified project and zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups', 'GET', params);

    /**
     * Retrieves the list of network endpoint groups and sorts them by zone. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/networkEndpointGroups', 'GET', params);

    /**
     * Returns the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}', 'GET', params);

    /**
     * Creates a network endpoint group in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where you want to create the network endpoint group. It should comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups', 'POST', params);

    /**
     * Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group to delete. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}', 'DELETE', params);

    /**
     * Attach a list of network endpoints to the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.attachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints', 'POST', params);

    /**
     * Detach a list of network endpoints from the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.detachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints', 'POST', params);

    /**
     * Lists the network endpoints in the specified network endpoint group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone where the network endpoint group is located. It should comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.listNetworkEndpoints = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networkEndpointGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions', 'POST', params);

    this.globalNetworkEndpointGroups = {};

    /**
     * Retrieves the list of network endpoint groups that are located in the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.list = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups', 'GET', params);

    /**
     * Returns the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.get = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}', 'GET', params);

    /**
     * Creates a network endpoint group in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.insert = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups', 'POST', params);

    /**
     * Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group to delete. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.delete = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}', 'DELETE', params);

    /**
     * Attach a network endpoint to the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.attachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints', 'POST', params);

    /**
     * Detach the network endpoint from the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.detachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints', 'POST', params);

    /**
     * Lists the network endpoints in the specified network endpoint group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalNetworkEndpointGroups.listNetworkEndpoints = (params) => this._makeRequest('projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints', 'POST', params);

    this.regionNetworkEndpointGroups = {};

    /**
     * Retrieves the list of regional network endpoint groups available to the specified project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the network endpoint group is located. It should comply with RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.list = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups', 'GET', params);

    /**
     * Returns the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the network endpoint group is located. It should comply with RFC1035.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.get = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}', 'GET', params);

    /**
     * Creates a network endpoint group in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where you want to create the network endpoint group. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups', 'POST', params);

    /**
     * Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group to delete. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the network endpoint group is located. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}', 'DELETE', params);

    /**
     * Attach a list of network endpoints to the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where you want to create the network endpoint group. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.attachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints', 'POST', params);

    /**
     * Detach the network endpoint from the specified network endpoint group.
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group you are detaching network endpoints from. It should comply with RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the network endpoint group is located. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.detachNetworkEndpoints = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints', 'POST', params);

    /**
     * Lists the network endpoints in the specified network endpoint group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.networkEndpointGroup - (Required) The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region where the network endpoint group is located. It should comply with RFC1035.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionNetworkEndpointGroups.listNetworkEndpoints = (params) => this._makeRequest('projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints', 'POST', params);

    this.networks = {};

    /**
     * Retrieves the list of networks available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.networks.list = (params) => this._makeRequest('projects/{project}/global/networks', 'GET', params);

    /**
     * Returns the specified network.
     * @param {string} params.network - (Required) Name of the network to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networks.get = (params) => this._makeRequest('projects/{project}/global/networks/{network}', 'GET', params);

    /**
     * Creates a network in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.insert = (params) => this._makeRequest('projects/{project}/global/networks', 'POST', params);

    /**
     * Deletes the specified network.
     * @param {string} params.network - (Required) Name of the network to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networks.delete = (params) => this._makeRequest('projects/{project}/global/networks/{network}', 'DELETE', params);

    /**
     * Patches the specified network with the data included in the request. Only routingConfig can be modified.
     * @param {string} params.network - (Required) Name of the network to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.patch = (params) => this._makeRequest('projects/{project}/global/networks/{network}', 'PATCH', params);

    /**
     * Updates the specified network peering with the data included in the request. You can only modify the NetworkPeering.export_custom_routes field and the NetworkPeering.import_custom_routes field.
     * @param {string} params.network - (Required) Name of the network resource which the updated peering is belonging to.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.updatePeering = (params) => this._makeRequest('projects/{project}/global/networks/{network}/updatePeering', 'PATCH', params);

    /**
     * Adds a peering to the specified network.
     * @param {string} params.network - (Required) Name of the network resource to add peering to.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.addPeering = (params) => this._makeRequest('projects/{project}/global/networks/{network}/addPeering', 'POST', params);

    /**
     * Requests to remove a peering from the specified network. Applicable only for PeeringConnection with update_strategy=CONSENSUS.
     * @param {string} params.network - (Required) Name of the network resource to remove peering from.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.requestRemovePeering = (params) => this._makeRequest('projects/{project}/global/networks/{network}/requestRemovePeering', 'POST', params);

    /**
     * Removes a peering from the specified network.
     * @param {string} params.network - (Required) Name of the network resource to remove peering from.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.removePeering = (params) => this._makeRequest('projects/{project}/global/networks/{network}/removePeering', 'POST', params);

    /**
     * Switches the network mode from auto subnet mode to custom subnet mode.
     * @param {string} params.network - (Required) Name of the network to be updated.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.networks.switchToCustomMode = (params) => this._makeRequest('projects/{project}/global/networks/{network}/switchToCustomMode', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.networks.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/networks/{resource}/testIamPermissions', 'POST', params);

    /**
     * Returns the effective firewalls on a given network.
     * @param {string} params.network - (Required) Name of the network for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networks.getEffectiveFirewalls = (params) => this._makeRequest('projects/{project}/global/networks/{network}/getEffectiveFirewalls', 'GET', params);

    /**
     * Lists the peering routes exchanged over peering connection.
     * @param {string} params.direction - The direction of the exchanged routes.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.network - (Required) Name of the network for this request.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.peeringName - The response will show routes exchanged over the given peering connection.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.networks.listPeeringRoutes = (params) => this._makeRequest('projects/{project}/global/networks/{network}/listPeeringRoutes', 'GET', params);

    this.nodeGroups = {};

    /**
     * Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeGroups.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups', 'GET', params);

    /**
     * Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.nodeGroups.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/nodeGroups', 'GET', params);

    /**
     * Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead.
     * @param {string} params.nodeGroup - (Required) Name of the node group to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeGroups.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', 'GET', params);

    /**
     * Creates a NodeGroup resource in the specified project using the data included in the request.
     * @param {integer} params.initialNodeCount - (Required) Initial count of nodes in the node group.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups', 'POST', params);

    /**
     * Deletes the specified NodeGroup resource.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeGroups.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', 'DELETE', params);

    /**
     * Adds specified number of nodes to the node group.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.addNodes = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes', 'POST', params);

    /**
     * Deletes specified nodes from the node group.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource whose nodes will be deleted.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.deleteNodes = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes', 'POST', params);

    /**
     * Lists nodes in the node group.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource whose nodes you want to list.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeGroups.listNodes = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes', 'POST', params);

    /**
     * Updates the node template of the node group.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.setNodeTemplate = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate', 'POST', params);

    /**
     * Updates the specified node group.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource to update.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.patch = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}', 'PATCH', params);

    /**
     * Simulates maintenance event on specified nodes from the node group.
     * @param {string} params.nodeGroup - (Required) Name of the NodeGroup resource whose nodes will go under maintenance simulation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.simulateMaintenanceEvent = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent', 'POST', params);

    /**
     * Perform maintenance on a subset of nodes in the node group.
     * @param {string} params.nodeGroup - (Required) Name of the node group scoping this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.performMaintenance = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/performMaintenance', 'POST', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeGroups.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeGroups.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions', 'POST', params);

    this.nodeTemplates = {};

    /**
     * Retrieves a list of node templates available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.nodeTemplates.list = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates', 'GET', params);

    /**
     * Retrieves an aggregated list of node templates. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.nodeTemplates.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/nodeTemplates', 'GET', params);

    /**
     * Returns the specified node template.
     * @param {string} params.nodeTemplate - (Required) Name of the node template to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @return {object} The API response object.
     */
    this.nodeTemplates.get = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}', 'GET', params);

    /**
     * Creates a NodeTemplate resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeTemplates.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates', 'POST', params);

    /**
     * Deletes the specified NodeTemplate resource.
     * @param {string} params.nodeTemplate - (Required) Name of the NodeTemplate resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.nodeTemplates.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.nodeTemplates.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeTemplates.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.nodeTemplates.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions', 'POST', params);

    this.nodeTypes = {};

    /**
     * Retrieves a list of node types available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeTypes.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeTypes', 'GET', params);

    /**
     * Retrieves an aggregated list of node types. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.nodeTypes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/nodeTypes', 'GET', params);

    /**
     * Returns the specified node type.
     * @param {string} params.nodeType - (Required) Name of the node type to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.nodeTypes.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/nodeTypes/{nodeType}', 'GET', params);

    this.regionNotificationEndpoints = {};

    /**
     * Lists the NotificationEndpoints for a project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionNotificationEndpoints.list = (params) => this._makeRequest('projects/{project}/regions/{region}/notificationEndpoints', 'GET', params);

    /**
     * Returns the specified NotificationEndpoint resource in the given region.
     * @param {string} params.notificationEndpoint - (Required) Name of the NotificationEndpoint resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @return {object} The API response object.
     */
    this.regionNotificationEndpoints.get = (params) => this._makeRequest('projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}', 'GET', params);

    /**
     * Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNotificationEndpoints.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/notificationEndpoints', 'POST', params);

    /**
     * Deletes the specified NotificationEndpoint in the given region
     * @param {string} params.notificationEndpoint - (Required) Name of the NotificationEndpoint resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.regionNotificationEndpoints.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionNotificationEndpoints.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions', 'POST', params);

    this.packetMirrorings = {};

    /**
     * Returns the specified PacketMirroring resource.
     * @param {string} params.packetMirroring - (Required) Name of the PacketMirroring resource to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.packetMirrorings.get = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', 'GET', params);

    /**
     * Creates a PacketMirroring resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.packetMirrorings.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings', 'POST', params);

    /**
     * Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.packetMirroring - (Required) Name of the PacketMirroring resource to patch.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.packetMirrorings.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', 'PATCH', params);

    /**
     * Deletes the specified PacketMirroring resource.
     * @param {string} params.packetMirroring - (Required) Name of the PacketMirroring resource to delete.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.packetMirrorings.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}', 'DELETE', params);

    /**
     * Retrieves a list of PacketMirroring resources available to the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.packetMirrorings.list = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings', 'GET', params);

    /**
     * Retrieves an aggregated list of packetMirrorings. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.packetMirrorings.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/packetMirrorings', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.packetMirrorings.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions', 'POST', params);

    this.projects = {};

    /**
     * Returns the specified Project resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.projects.get = (params) => this._makeRequest('projects/{project}', 'GET', params);

    /**
     * Sets metadata common to all instances within the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.setCommonInstanceMetadata = (params) => this._makeRequest('projects/{project}/setCommonInstanceMetadata', 'POST', params);

    /**
     * Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.setUsageExportBucket = (params) => this._makeRequest('projects/{project}/setUsageExportBucket', 'POST', params);

    /**
     * Moves an instance and its attached persistent disks from one zone to another. *Note*: Moving VMs or disks by using this method might cause unexpected behavior. For more information, see the [known issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior). [Deprecated] This method is deprecated. See [moving instance across zones](/compute/docs/instances/moving-instance-across-zones) instead.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.moveInstance = (params) => this._makeRequest('projects/{project}/moveInstance', 'POST', params);

    /**
     * Moves a persistent disk from one zone to another.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.moveDisk = (params) => this._makeRequest('projects/{project}/moveDisk', 'POST', params);

    /**
     * Lists all shared VPC host projects visible to the user in an organization.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.listXpnHosts = (params) => this._makeRequest('projects/{project}/listXpnHosts', 'POST', params);

    /**
     * Enable this project as a shared VPC host project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.projects.enableXpnHost = (params) => this._makeRequest('projects/{project}/enableXpnHost', 'POST', params);

    /**
     * Disable this project as a shared VPC host project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.projects.disableXpnHost = (params) => this._makeRequest('projects/{project}/disableXpnHost', 'POST', params);

    /**
     * Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.enableXpnResource = (params) => this._makeRequest('projects/{project}/enableXpnResource', 'POST', params);

    /**
     * Disable a service resource (also known as service project) associated with this host project.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.disableXpnResource = (params) => this._makeRequest('projects/{project}/disableXpnResource', 'POST', params);

    /**
     * Gets the shared VPC host project that this project links to. May be empty if no link exists.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.projects.getXpnHost = (params) => this._makeRequest('projects/{project}/getXpnHost', 'GET', params);

    /**
     * Gets service resources (a.k.a service project) associated with this host project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.projects.getXpnResources = (params) => this._makeRequest('projects/{project}/getXpnResources', 'GET', params);

    /**
     * Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.setDefaultNetworkTier = (params) => this._makeRequest('projects/{project}/setDefaultNetworkTier', 'POST', params);

    /**
     * Sets the Cloud Armor Managed Protection (CAMP) tier of the project. To set PLUS or above the billing account of the project must be subscribed to Managed Protection Plus. See Subscribing to Managed Protection Plus for more information.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.setManagedProtectionTier = (params) => this._makeRequest('projects/{project}/setManagedProtectionTier', 'POST', params);

    /**
     * Sets the Cloud Armor tier of the project. To set ENTERPRISE or above the billing account of the project must be subscribed to Cloud Armor Enterprise. See Subscribing to Cloud Armor Enterprise for more information.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.projects.setCloudArmorTier = (params) => this._makeRequest('projects/{project}/setCloudArmorTier', 'POST', params);

    this.publicAdvertisedPrefixes = {};

    /**
     * Lists the PublicAdvertisedPrefixes for a project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.list = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes', 'GET', params);

    /**
     * Returns the specified PublicAdvertisedPrefix resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicAdvertisedPrefix - (Required) Name of the PublicAdvertisedPrefix resource to return.
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.get = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', 'GET', params);

    /**
     * Creates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.insert = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes', 'POST', params);

    /**
     * Deletes the specified PublicAdvertisedPrefix
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicAdvertisedPrefix - (Required) Name of the PublicAdvertisedPrefix resource to delete.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.delete = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', 'DELETE', params);

    /**
     * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicAdvertisedPrefix - (Required) Name of the PublicAdvertisedPrefix resource to patch.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.patch = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', 'PATCH', params);

    /**
     * Announces the specified PublicAdvertisedPrefix
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicAdvertisedPrefix - (Required) The name of the public advertised prefix. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.announce = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/announce', 'POST', params);

    /**
     * Withdraws the specified PublicAdvertisedPrefix
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicAdvertisedPrefix - (Required) The name of the public advertised prefix. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicAdvertisedPrefixes.withdraw = (params) => this._makeRequest('projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/withdraw', 'POST', params);

    this.globalPublicDelegatedPrefixes = {};

    /**
     * Lists the global PublicDelegatedPrefixes for a project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.globalPublicDelegatedPrefixes.list = (params) => this._makeRequest('projects/{project}/global/publicDelegatedPrefixes', 'GET', params);

    /**
     * Returns the specified global PublicDelegatedPrefix resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to return.
     * @return {object} The API response object.
     */
    this.globalPublicDelegatedPrefixes.get = (params) => this._makeRequest('projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'GET', params);

    /**
     * Creates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalPublicDelegatedPrefixes.insert = (params) => this._makeRequest('projects/{project}/global/publicDelegatedPrefixes', 'POST', params);

    /**
     * Deletes the specified global PublicDelegatedPrefix.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to delete.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.globalPublicDelegatedPrefixes.delete = (params) => this._makeRequest('projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'DELETE', params);

    /**
     * Patches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to patch.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.globalPublicDelegatedPrefixes.patch = (params) => this._makeRequest('projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'PATCH', params);

    this.publicDelegatedPrefixes = {};

    /**
     * Lists the PublicDelegatedPrefixes for a project in the given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.list = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes', 'GET', params);

    /**
     * Returns the specified PublicDelegatedPrefix resource in the given region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to return.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.get = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'GET', params);

    /**
     * Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes', 'POST', params);

    /**
     * Deletes the specified PublicDelegatedPrefix in the given region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to delete.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'DELETE', params);

    /**
     * Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) Name of the PublicDelegatedPrefix resource to patch.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}', 'PATCH', params);

    /**
     * Announces the specified PublicDelegatedPrefix in the given region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) The name of the public delegated prefix. It should comply with RFC1035.
     * @param {string} params.region - (Required) The name of the region where the public delegated prefix is located. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.announce = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce', 'POST', params);

    /**
     * Withdraws the specified PublicDelegatedPrefix in the given region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.publicDelegatedPrefix - (Required) The name of the public delegated prefix. It should comply with RFC1035.
     * @param {string} params.region - (Required) The name of the region where the public delegated prefix is located. It should comply with RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.withdraw = (params) => this._makeRequest('projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw', 'POST', params);

    /**
     * Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.publicDelegatedPrefixes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/publicDelegatedPrefixes', 'GET', params);

    this.regions = {};

    /**
     * Retrieves the list of region resources available to the specified project. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `items.quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request. This method fails if the quota information is unavailable for the region and if the organization policy constraint compute.requireBasicQuotaInResponse is enforced. This constraint, when enforced, disables the fail-open behaviour when quota information (the `items.quotas` field) is unavailable for the region. It is recommended to use the default setting for the constraint unless your application requires the fail-closed behaviour for this method.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regions.list = (params) => this._makeRequest('projects/{project}/regions', 'GET', params);

    /**
     * Returns the specified Region resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request. This method fails if the quota information is unavailable for the region and if the organization policy constraint compute.requireBasicQuotaInResponse is enforced. This constraint, when enforced, disables the fail-open behaviour when quota information (the `items.quotas` field) is unavailable for the region. It is recommended to use the default setting for the constraint unless your application requires the fail-closed behaviour for this method.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region resource to return.
     * @return {object} The API response object.
     */
    this.regions.get = (params) => this._makeRequest('projects/{project}/regions/{region}', 'GET', params);

    this.subnetworks = {};

    /**
     * Retrieves a list of subnetworks available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.subnetworks.list = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks', 'GET', params);

    /**
     * Retrieves an aggregated list of subnetworks. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.subnetworks.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/subnetworks', 'GET', params);

    /**
     * Retrieves an aggregated list of all usable subnetworks in the project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProject - The project id or project number in which the subnetwork is intended to be used. Only applied for Shared VPC. See [Shared VPC documentation](https://cloud.google.com/vpc/docs/shared-vpc/)
     * @return {object} The API response object.
     */
    this.subnetworks.listUsable = (params) => this._makeRequest('projects/{project}/aggregated/subnetworks/listUsable', 'GET', params);

    /**
     * Returns the specified subnetwork.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.subnetwork - (Required) Name of the Subnetwork resource to return.
     * @return {object} The API response object.
     */
    this.subnetworks.get = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{subnetwork}', 'GET', params);

    /**
     * Creates a subnetwork in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks', 'POST', params);

    /**
     * Deletes the specified subnetwork.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.subnetwork - (Required) Name of the Subnetwork resource to delete.
     * @return {object} The API response object.
     */
    this.subnetworks.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{subnetwork}', 'DELETE', params);

    /**
     * Expands the IP CIDR range of the subnetwork to a specified value.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.subnetwork - (Required) Name of the Subnetwork resource to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.expandIpCidrRange = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange', 'POST', params);

    /**
     * Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
     * @param {integer} params.drainTimeoutSeconds - The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork. The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.subnetwork - (Required) Name of the Subnetwork resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{subnetwork}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.subnetworks.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions', 'POST', params);

    /**
     * Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.subnetwork - (Required) Name of the Subnetwork resource.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.subnetworks.setPrivateIpGoogleAccess = (params) => this._makeRequest('projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess', 'POST', params);

    this.networkProfiles = {};

    /**
     * Retrieves a list of network profiles available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.networkProfiles.list = (params) => this._makeRequest('projects/{project}/global/networkProfiles', 'GET', params);

    /**
     * Returns the specified network profile.
     * @param {string} params.networkProfile - (Required) Name of the network profile to return.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.networkProfiles.get = (params) => this._makeRequest('projects/{project}/global/networkProfiles/{networkProfile}', 'GET', params);

    this.previewFeatures = {};

    /**
     * Returns the details of the given PreviewFeature.
     * @param {string} params.previewFeature - (Required) Name of the PreviewFeature for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.previewFeatures.get = (params) => this._makeRequest('projects/{project}/global/previewFeatures/{previewFeature}', 'GET', params);

    /**
     * Returns the details of the given PreviewFeature.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.previewFeatures.list = (params) => this._makeRequest('projects/{project}/global/previewFeatures', 'GET', params);

    /**
     * Patches the given PreviewFeature. This method is used to enable or disable a PreviewFeature.
     * @param {string} params.previewFeature - (Required) Name of the PreviewFeature for this request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.previewFeatures.update = (params) => this._makeRequest('projects/{project}/global/previewFeatures/{previewFeature}', 'PATCH', params);

    this.reservationBlocks = {};

    /**
     * Retrieves information about the specified reservation block.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.reservation - (Required) The name of the reservation. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.reservationBlock - (Required) The name of the reservation block. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.view - View of the Block.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.reservationBlocks.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}/reservationBlocks/{reservationBlock}', 'GET', params);

    /**
     * Retrieves a list of reservation blocks under a single reservation.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.reservation - (Required) The name of the reservation. Name should conform to RFC1035 or be a resource ID.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.reservationBlocks.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}/reservationBlocks', 'GET', params);

    /**
     * Allows customers to perform maintenance on a reservation block
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservation - (Required) The name of the reservation. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.reservationBlock - (Required) The name of the reservation block. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.reservationBlocks.performMaintenance = (params) => this._makeRequest('projects/{project}/zones/{zone}/reservations/{reservation}/reservationBlocks/{reservationBlock}/performMaintenance', 'POST', params);

    this.reservationSubBlocks = {};

    /**
     * Retrieves information about the specified reservation subBlock.
     * @param {string} params.parentName - (Required) The name of the parent reservation and parent block. In the format of reservations/{reservation_name}/reservationBlocks/{reservation_block_name}
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.reservationSubBlock - (Required) The name of the reservation subBlock. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.reservationSubBlocks.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/{parentName}/reservationSubBlocks/{reservationSubBlock}', 'GET', params);

    /**
     * Retrieves a list of reservation subBlocks under a single reservation.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.parentName - (Required) The name of the parent reservation and parent block. In the format of reservations/{reservation_name}/reservationBlocks/{reservation_block_name}
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.reservationSubBlocks.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/{parentName}/reservationSubBlocks', 'GET', params);

    /**
     * Allows customers to perform maintenance on a reservation subBlock
     * @param {string} params.parentName - (Required) The name of the parent reservation and parent block. In the format of reservations/{reservation_name}/reservationBlocks/{reservation_block_name}
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.reservationSubBlock - (Required) The name of the reservation subBlock. Name should conform to RFC1035 or be a resource ID.
     * @param {string} params.zone - (Required) Name of the zone for this request. Zone name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.reservationSubBlocks.performMaintenance = (params) => this._makeRequest('projects/{project}/zones/{zone}/{parentName}/reservationSubBlocks/{reservationSubBlock}/performMaintenance', 'POST', params);

    this.resourcePolicies = {};

    /**
     * A list all the resource policies that have been configured for the specified project in specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.resourcePolicies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies', 'GET', params);

    /**
     * Retrieves an aggregated list of resource policies. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.resourcePolicies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/resourcePolicies', 'GET', params);

    /**
     * Retrieves all information of the specified resource policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.resourcePolicy - (Required) Name of the resource policy to retrieve.
     * @return {object} The API response object.
     */
    this.resourcePolicies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', 'GET', params);

    /**
     * Creates a new resource policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.resourcePolicies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies', 'POST', params);

    /**
     * Deletes the specified resource policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resourcePolicy - (Required) Name of the resource policy to delete.
     * @return {object} The API response object.
     */
    this.resourcePolicies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', 'DELETE', params);

    /**
     * Modify the specified resource policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resourcePolicy - (Required) Id of the resource policy to patch.
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.resourcePolicies.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.resourcePolicies.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.resourcePolicies.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.resourcePolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions', 'POST', params);

    this.routes = {};

    /**
     * Retrieves the list of Route resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.routes.list = (params) => this._makeRequest('projects/{project}/global/routes', 'GET', params);

    /**
     * Returns the specified Route resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.route - (Required) Name of the Route resource to return.
     * @return {object} The API response object.
     */
    this.routes.get = (params) => this._makeRequest('projects/{project}/global/routes/{route}', 'GET', params);

    /**
     * Creates a Route resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routes.insert = (params) => this._makeRequest('projects/{project}/global/routes', 'POST', params);

    /**
     * Deletes the specified Route resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.route - (Required) Name of the Route resource to delete.
     * @return {object} The API response object.
     */
    this.routes.delete = (params) => this._makeRequest('projects/{project}/global/routes/{route}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routes.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/routes/{resource}/testIamPermissions', 'POST', params);

    this.routers = {};

    /**
     * Returns the specified Router resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.router - (Required) Name of the Router resource to return.
     * @return {object} The API response object.
     */
    this.routers.get = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}', 'GET', params);

    /**
     * Creates a Router resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/routers', 'POST', params);

    /**
     * Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.update = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}', 'PUT', params);

    /**
     * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}', 'PATCH', params);

    /**
     * Deletes the specified Router resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource to delete.
     * @return {object} The API response object.
     */
    this.routers.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}', 'DELETE', params);

    /**
     * Retrieves a list of Router resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.routers.list = (params) => this._makeRequest('projects/{project}/regions/{region}/routers', 'GET', params);

    /**
     * Retrieves an aggregated list of routers. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.routers.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/routers', 'GET', params);

    /**
     * Retrieves runtime information of the specified router.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.router - (Required) Name of the Router resource to query.
     * @return {object} The API response object.
     */
    this.routers.getRouterStatus = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/getRouterStatus', 'GET', params);

    /**
     * Retrieves runtime Nat mapping information of VM endpoints.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.natName - Name of the nat service to filter the Nat Mapping information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.router - (Required) Name of the Router resource to query for Nat Mapping information of VM endpoints.
     * @return {object} The API response object.
     */
    this.routers.getNatMappingInfo = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo', 'GET', params);

    /**
     * Retrieves runtime NAT IP information.
     * @param {string} params.natName - Name of the nat service to filter the NAT IP information. If it is omitted, all nats for this router will be returned. Name should conform to RFC1035.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.router - (Required) Name of the Router resource to query for Nat IP information. The name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.routers.getNatIpInfo = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/getNatIpInfo', 'GET', params);

    /**
     * Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.router - (Required) Name of the Router resource to query.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.preview = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/preview', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{resource}/testIamPermissions', 'POST', params);

    /**
     * Updates or creates new Route Policy
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource where Route Policy is defined.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.updateRoutePolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/updateRoutePolicy', 'POST', params);

    /**
     * Patches Route Policy
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource where Route Policy is defined.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.routers.patchRoutePolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/patchRoutePolicy', 'POST', params);

    /**
     * Deletes Route Policy
     * @param {string} params.policy - The Policy name for this request. Name must conform to RFC1035
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.router - (Required) Name of the Router resource where Route Policy is defined.
     * @return {object} The API response object.
     */
    this.routers.deleteRoutePolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/deleteRoutePolicy', 'POST', params);

    /**
     * Returns specified Route Policy
     * @param {string} params.policy - The Policy name for this request. Name must conform to RFC1035
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.router - (Required) Name of the Router resource to query for the route policy. The name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.routers.getRoutePolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/getRoutePolicy', 'GET', params);

    /**
     * Retrieves a list of router route policy subresources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.router - (Required) Name or id of the resource for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.routers.listRoutePolicies = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/listRoutePolicies', 'GET', params);

    /**
     * Retrieves a list of router bgp routes available to the specified project.
     * @param {string} params.addressFamily - (Required) limit results to this address family (either IPv4 or IPv6)
     * @param {string} params.destinationPrefix - Limit results to destinations that are subnets of this CIDR range
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.peer - (Required) limit results to the BGP peer with the given name. Name should conform to RFC1035.
     * @param {boolean} params.policyApplied - When true, the method returns post-policy routes. Otherwise, it returns pre-policy routes.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.routeType - (Required) limit results to this type of route (either LEARNED or ADVERTISED)
     * @param {string} params.router - (Required) Name or id of the resource for this request. Name should conform to RFC1035.
     * @return {object} The API response object.
     */
    this.routers.listBgpRoutes = (params) => this._makeRequest('projects/{project}/regions/{region}/routers/{router}/listBgpRoutes', 'GET', params);

    this.serviceAttachments = {};

    /**
     * Retrieves the list of all ServiceAttachment resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.serviceAttachments.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/serviceAttachments', 'GET', params);

    /**
     * Lists the ServiceAttachments for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.serviceAttachments.list = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments', 'GET', params);

    /**
     * Returns the specified ServiceAttachment resource in the given scope.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.serviceAttachment - (Required) Name of the ServiceAttachment resource to return.
     * @return {object} The API response object.
     */
    this.serviceAttachments.get = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', 'GET', params);

    /**
     * Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.serviceAttachments.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments', 'POST', params);

    /**
     * Deletes the specified ServiceAttachment in the given scope
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region of this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.serviceAttachment - (Required) Name of the ServiceAttachment resource to delete.
     * @return {object} The API response object.
     */
    this.serviceAttachments.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', 'DELETE', params);

    /**
     * Patches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region scoping this request and should conform to RFC1035.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.serviceAttachment - (Required) The resource id of the ServiceAttachment to patch. It should conform to RFC1035 resource name or be a string form on an unsigned long number.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.serviceAttachments.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', 'PATCH', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @return {object} The API response object.
     */
    this.serviceAttachments.getIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.serviceAttachments.setIamPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.serviceAttachments.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions', 'POST', params);

    this.snapshotSettings = {};

    /**
     * Get snapshot settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @return {object} The API response object.
     */
    this.snapshotSettings.get = (params) => this._makeRequest('projects/{project}/global/snapshotSettings', 'GET', params);

    /**
     * Patch snapshot settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.snapshotSettings.patch = (params) => this._makeRequest('projects/{project}/global/snapshotSettings', 'PATCH', params);

    this.regionSnapshotSettings = {};

    /**
     * Get region snapshot settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @return {object} The API response object.
     */
    this.regionSnapshotSettings.get = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshotSettings', 'GET', params);

    /**
     * Patch region snapshot settings.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSnapshotSettings.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/snapshotSettings', 'PATCH', params);

    this.sslCertificates = {};

    /**
     * Retrieves the list of SslCertificate resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.sslCertificates.list = (params) => this._makeRequest('projects/{project}/global/sslCertificates', 'GET', params);

    /**
     * Returns the specified SslCertificate resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.sslCertificate - (Required) Name of the SslCertificate resource to return.
     * @return {object} The API response object.
     */
    this.sslCertificates.get = (params) => this._makeRequest('projects/{project}/global/sslCertificates/{sslCertificate}', 'GET', params);

    /**
     * Creates a SslCertificate resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.sslCertificates.insert = (params) => this._makeRequest('projects/{project}/global/sslCertificates', 'POST', params);

    /**
     * Deletes the specified SslCertificate resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslCertificate - (Required) Name of the SslCertificate resource to delete.
     * @return {object} The API response object.
     */
    this.sslCertificates.delete = (params) => this._makeRequest('projects/{project}/global/sslCertificates/{sslCertificate}', 'DELETE', params);

    /**
     * Retrieves the list of all SslCertificate resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.sslCertificates.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/sslCertificates', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.sslCertificates.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/sslCertificates/{resource}/testIamPermissions', 'POST', params);

    this.regionSslCertificates = {};

    /**
     * Retrieves the list of SslCertificate resources available to the specified project in the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionSslCertificates.list = (params) => this._makeRequest('projects/{project}/regions/{region}/sslCertificates', 'GET', params);

    /**
     * Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.sslCertificate - (Required) Name of the SslCertificate resource to return.
     * @return {object} The API response object.
     */
    this.regionSslCertificates.get = (params) => this._makeRequest('projects/{project}/regions/{region}/sslCertificates/{sslCertificate}', 'GET', params);

    /**
     * Creates a SslCertificate resource in the specified project and region using the data included in the request
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSslCertificates.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/sslCertificates', 'POST', params);

    /**
     * Deletes the specified SslCertificate resource in the region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslCertificate - (Required) Name of the SslCertificate resource to delete.
     * @return {object} The API response object.
     */
    this.regionSslCertificates.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/sslCertificates/{sslCertificate}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource and region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSslCertificates.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions', 'POST', params);

    this.sslPolicies = {};

    /**
     * Lists all the SSL policies that have been configured for the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.sslPolicies.list = (params) => this._makeRequest('projects/{project}/global/sslPolicies', 'GET', params);

    /**
     * Lists all of the ordered rules present in a single specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @return {object} The API response object.
     */
    this.sslPolicies.get = (params) => this._makeRequest('projects/{project}/global/sslPolicies/{sslPolicy}', 'GET', params);

    /**
     * Returns the specified SSL policy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.sslPolicies.insert = (params) => this._makeRequest('projects/{project}/global/sslPolicies', 'POST', params);

    /**
     * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
     * @return {object} The API response object.
     */
    this.sslPolicies.delete = (params) => this._makeRequest('projects/{project}/global/sslPolicies/{sslPolicy}', 'DELETE', params);

    /**
     * Patches the specified SSL policy with the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.sslPolicies.patch = (params) => this._makeRequest('projects/{project}/global/sslPolicies/{sslPolicy}', 'PATCH', params);

    /**
     * Lists all features that can be specified in the SSL policy when using custom profile.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.sslPolicies.listAvailableFeatures = (params) => this._makeRequest('projects/{project}/global/sslPolicies/listAvailableFeatures', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.sslPolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/sslPolicies/{resource}/testIamPermissions', 'POST', params);

    /**
     * Retrieves the list of all SslPolicy resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.sslPolicies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/sslPolicies', 'GET', params);

    this.regionSslPolicies = {};

    /**
     * Lists all the SSL policies that have been configured for the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies', 'GET', params);

    /**
     * Lists all of the ordered rules present in a single specified policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', 'GET', params);

    /**
     * Creates a new policy in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies', 'POST', params);

    /**
     * Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', 'DELETE', params);

    /**
     * Patches the specified SSL policy with the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.sslPolicy - (Required) Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies/{sslPolicy}', 'PATCH', params);

    /**
     * Lists all features that can be specified in the SSL policy when using custom profile.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.listAvailableFeatures = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionSslPolicies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/sslPolicies/{resource}/testIamPermissions', 'POST', params);

    this.storagePoolTypes = {};

    /**
     * Retrieves a list of storage pool types available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePoolTypes.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePoolTypes', 'GET', params);

    /**
     * Retrieves an aggregated list of storage pool types. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.storagePoolTypes.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/storagePoolTypes', 'GET', params);

    /**
     * Returns the specified storage pool type.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.storagePoolType - (Required) Name of the storage pool type to return.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePoolTypes.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePoolTypes/{storagePoolType}', 'GET', params);

    this.storagePools = {};

    /**
     * Retrieves a list of storage pools contained within the specified zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePools.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools', 'GET', params);

    /**
     * Retrieves an aggregated list of storage pools. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.storagePools.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/storagePools', 'GET', params);

    /**
     * Returns a specified storage pool. Gets a list of available storage pools by making a list() request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.storagePool - (Required) Name of the storage pool to return.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePools.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{storagePool}', 'GET', params);

    /**
     * Creates a storage pool in the specified project using the data in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.storagePools.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools', 'POST', params);

    /**
     * Deletes the specified storage pool. Deleting a storagePool removes its data permanently and is irreversible. However, deleting a storagePool does not delete any snapshots previously made from the storagePool. You must separately delete snapshots.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.storagePool - (Required) Name of the storage pool to delete.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePools.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{storagePool}', 'DELETE', params);

    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * @param {integer} params.optionsRequestedPolicyVersion - Requested IAM Policy version.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePools.getIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{resource}/getIamPolicy', 'GET', params);

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.storagePools.setIamPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{resource}/setIamPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.storagePools.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{resource}/testIamPermissions', 'POST', params);

    /**
     * Updates the specified storagePool with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: pool_provisioned_capacity_gb, pool_provisioned_iops and pool_provisioned_throughput.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.storagePool - (Required) The storagePool name for this request.
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.storagePools.update = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{storagePool}', 'PATCH', params);

    /**
     * Lists the disks in a specified storage pool.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.storagePool - (Required) Name of the storage pool to list disks of.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @return {object} The API response object.
     */
    this.storagePools.listDisks = (params) => this._makeRequest('projects/{project}/zones/{zone}/storagePools/{storagePool}/listDisks', 'GET', params);

    this.targetGrpcProxies = {};

    /**
     * Lists the TargetGrpcProxies for a project in the given scope.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.list = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies', 'GET', params);

    /**
     * Returns the specified TargetGrpcProxy resource in the given scope.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetGrpcProxy - (Required) Name of the TargetGrpcProxy resource to return.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.get = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', 'GET', params);

    /**
     * Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.insert = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies', 'POST', params);

    /**
     * Deletes the specified TargetGrpcProxy in the given scope
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetGrpcProxy - (Required) Name of the TargetGrpcProxy resource to delete.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.delete = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', 'DELETE', params);

    /**
     * Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetGrpcProxy - (Required) Name of the TargetGrpcProxy resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.patch = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}', 'PATCH', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetGrpcProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions', 'POST', params);

    this.targetHttpProxies = {};

    /**
     * Retrieves the list of TargetHttpProxy resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.list = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies', 'GET', params);

    /**
     * Returns the specified TargetHttpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy resource to return.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.get = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies/{targetHttpProxy}', 'GET', params);

    /**
     * Creates a TargetHttpProxy resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.insert = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies', 'POST', params);

    /**
     * Deletes the specified TargetHttpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy resource to delete.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.delete = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies/{targetHttpProxy}', 'DELETE', params);

    /**
     * Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.patch = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies/{targetHttpProxy}', 'PATCH', params);

    /**
     * Changes the URL map for TargetHttpProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy to set a URL map for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.setUrlMap = (params) => this._makeRequest('projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap', 'POST', params);

    /**
     * Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetHttpProxies', 'GET', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions', 'POST', params);

    this.regionTargetHttpProxies = {};

    /**
     * Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies', 'GET', params);

    /**
     * Returns the specified TargetHttpProxy resource in the specified region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy resource to return.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}', 'GET', params);

    /**
     * Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies', 'POST', params);

    /**
     * Deletes the specified TargetHttpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy resource to delete.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}', 'DELETE', params);

    /**
     * Changes the URL map for TargetHttpProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpProxy - (Required) Name of the TargetHttpProxy to set a URL map for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.setUrlMap = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions', 'POST', params);

    this.targetHttpsProxies = {};

    /**
     * Retrieves the list of TargetHttpsProxy resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.list = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies', 'GET', params);

    /**
     * Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetHttpsProxies', 'GET', params);

    /**
     * Returns the specified TargetHttpsProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to return.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.get = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', 'GET', params);

    /**
     * Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.insert = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies', 'POST', params);

    /**
     * Patches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.patch = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', 'PATCH', params);

    /**
     * Deletes the specified TargetHttpsProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to delete.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.delete = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', 'DELETE', params);

    /**
     * Changes the URL map for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource whose URL map is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.setUrlMap = (params) => this._makeRequest('projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap', 'POST', params);

    /**
     * Replaces SslCertificates for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.setSslCertificates = (params) => this._makeRequest('projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates', 'POST', params);

    /**
     * Changes the Certificate Map for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.setCertificateMap = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap', 'POST', params);

    /**
     * Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.setSslPolicy = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy', 'POST', params);

    /**
     * Sets the QUIC override policy for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.setQuicOverride = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetHttpsProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions', 'POST', params);

    this.regionTargetHttpsProxies = {};

    /**
     * Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies', 'GET', params);

    /**
     * Returns the specified TargetHttpsProxy resource in the specified region.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to return.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', 'GET', params);

    /**
     * Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies', 'POST', params);

    /**
     * Deletes the specified TargetHttpsProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to delete.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', 'DELETE', params);

    /**
     * Patches the specified regional TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', 'PATCH', params);

    /**
     * Changes the URL map for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy to set a URL map for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.setUrlMap = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap', 'POST', params);

    /**
     * Replaces SslCertificates for TargetHttpsProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetHttpsProxy - (Required) Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.setSslCertificates = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetHttpsProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions', 'POST', params);

    this.targetInstances = {};

    /**
     * Retrieves a list of TargetInstance resources available to the specified project and zone.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @return {object} The API response object.
     */
    this.targetInstances.list = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances', 'GET', params);

    /**
     * Retrieves an aggregated list of target instances. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetInstances.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetInstances', 'GET', params);

    /**
     * Returns the specified TargetInstance resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetInstance - (Required) Name of the TargetInstance resource to return.
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @return {object} The API response object.
     */
    this.targetInstances.get = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances/{targetInstance}', 'GET', params);

    /**
     * Creates a TargetInstance resource in the specified project and zone using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetInstances.insert = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances', 'POST', params);

    /**
     * Deletes the specified TargetInstance resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetInstance - (Required) Name of the TargetInstance resource to delete.
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @return {object} The API response object.
     */
    this.targetInstances.delete = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances/{targetInstance}', 'DELETE', params);

    /**
     * Sets the Google Cloud Armor security policy for the specified target instance. For more information, see Google Cloud Armor Overview
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetInstance - (Required) Name of the TargetInstance resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {string} params.zone - (Required) Name of the zone scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetInstances.setSecurityPolicy = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances/{targetInstance}/setSecurityPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {string} params.zone - (Required) The name of the zone for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetInstances.testIamPermissions = (params) => this._makeRequest('projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions', 'POST', params);

    this.targetPools = {};

    /**
     * Retrieves a list of target pools available to the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetPools.list = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools', 'GET', params);

    /**
     * Retrieves an aggregated list of target pools. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetPools.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetPools', 'GET', params);

    /**
     * Returns the specified target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to return.
     * @return {object} The API response object.
     */
    this.targetPools.get = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}', 'GET', params);

    /**
     * Creates a target pool in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools', 'POST', params);

    /**
     * Deletes the specified target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to delete.
     * @return {object} The API response object.
     */
    this.targetPools.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}', 'DELETE', params);

    /**
     * Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to which the queried instance belongs.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.getHealth = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth', 'POST', params);

    /**
     * Adds health check URLs to a target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the target pool to add a health check to.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.addHealthCheck = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck', 'POST', params);

    /**
     * Removes health check URL from a target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the target pool to remove health checks from.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.removeHealthCheck = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck', 'POST', params);

    /**
     * Adds an instance to a target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to add instances to.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.addInstance = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance', 'POST', params);

    /**
     * Removes instance URL from a target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to remove instances from.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.removeInstance = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance', 'POST', params);

    /**
     * Changes a backup target pool's configurations.
     * @param {number} params.failoverRatio - New failoverRatio value for the target pool.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to set a backup pool for.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.setBackup = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup', 'POST', params);

    /**
     * Sets the Google Cloud Armor security policy for the specified target pool. For more information, see Google Cloud Armor Overview
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetPool - (Required) Name of the TargetPool resource to which the security policy should be set. The name should conform to RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.setSecurityPolicy = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{targetPool}/setSecurityPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetPools.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions', 'POST', params);

    this.targetSslProxies = {};

    /**
     * Retrieves the list of TargetSslProxy resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetSslProxies.list = (params) => this._makeRequest('projects/{project}/global/targetSslProxies', 'GET', params);

    /**
     * Returns the specified TargetSslProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource to return.
     * @return {object} The API response object.
     */
    this.targetSslProxies.get = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}', 'GET', params);

    /**
     * Creates a TargetSslProxy resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.insert = (params) => this._makeRequest('projects/{project}/global/targetSslProxies', 'POST', params);

    /**
     * Deletes the specified TargetSslProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource to delete.
     * @return {object} The API response object.
     */
    this.targetSslProxies.delete = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}', 'DELETE', params);

    /**
     * Changes the BackendService for TargetSslProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource whose BackendService resource is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.setBackendService = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService', 'POST', params);

    /**
     * Changes SslCertificates for TargetSslProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.setSslCertificates = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates', 'POST', params);

    /**
     * Changes the Certificate Map for TargetSslProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.setCertificateMap = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap', 'POST', params);

    /**
     * Changes the ProxyHeaderType for TargetSslProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource whose ProxyHeader is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.setProxyHeader = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader', 'POST', params);

    /**
     * Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the load balancer. They do not affect the connection between the load balancer and the backends.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetSslProxy - (Required) Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.setSslPolicy = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetSslProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/targetSslProxies/{resource}/testIamPermissions', 'POST', params);

    this.targetTcpProxies = {};

    /**
     * Retrieves the list of TargetTcpProxy resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.list = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies', 'GET', params);

    /**
     * Retrieves the list of all TargetTcpProxy resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetTcpProxies', 'GET', params);

    /**
     * Returns the specified TargetTcpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource to return.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.get = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies/{targetTcpProxy}', 'GET', params);

    /**
     * Creates a TargetTcpProxy resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.insert = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies', 'POST', params);

    /**
     * Deletes the specified TargetTcpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource to delete.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.delete = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies/{targetTcpProxy}', 'DELETE', params);

    /**
     * Changes the BackendService for TargetTcpProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource whose BackendService resource is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.setBackendService = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService', 'POST', params);

    /**
     * Changes the ProxyHeaderType for TargetTcpProxy.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource whose ProxyHeader is to be set.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.setProxyHeader = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetTcpProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions', 'POST', params);

    this.regionTargetTcpProxies = {};

    /**
     * Retrieves a list of TargetTcpProxy resources available to the specified project in a given region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionTargetTcpProxies.list = (params) => this._makeRequest('projects/{project}/regions/{region}/targetTcpProxies', 'GET', params);

    /**
     * Returns the specified TargetTcpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource to return.
     * @return {object} The API response object.
     */
    this.regionTargetTcpProxies.get = (params) => this._makeRequest('projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}', 'GET', params);

    /**
     * Creates a TargetTcpProxy resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetTcpProxies.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/targetTcpProxies', 'POST', params);

    /**
     * Deletes the specified TargetTcpProxy resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetTcpProxy - (Required) Name of the TargetTcpProxy resource to delete.
     * @return {object} The API response object.
     */
    this.regionTargetTcpProxies.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionTargetTcpProxies.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/targetTcpProxies/{resource}/testIamPermissions', 'POST', params);

    this.targetVpnGateways = {};

    /**
     * Retrieves a list of target VPN gateways available to the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.list = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways', 'GET', params);

    /**
     * Retrieves an aggregated list of target VPN gateways. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/targetVpnGateways', 'GET', params);

    /**
     * Returns the specified target VPN gateway.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.targetVpnGateway - (Required) Name of the target VPN gateway to return.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.get = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}', 'GET', params);

    /**
     * Creates a target VPN gateway in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways', 'POST', params);

    /**
     * Deletes the specified target VPN gateway.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.targetVpnGateway - (Required) Name of the target VPN gateway to delete.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.targetVpnGateways.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels', 'POST', params);

    this.urlMaps = {};

    /**
     * Retrieves the list of UrlMap resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.urlMaps.list = (params) => this._makeRequest('projects/{project}/global/urlMaps', 'GET', params);

    /**
     * Retrieves the list of all UrlMap resources, regional and global, available to the specified project. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Name of the project scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.urlMaps.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/urlMaps', 'GET', params);

    /**
     * Returns the specified UrlMap resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to return.
     * @return {object} The API response object.
     */
    this.urlMaps.get = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}', 'GET', params);

    /**
     * Creates a UrlMap resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.insert = (params) => this._makeRequest('projects/{project}/global/urlMaps', 'POST', params);

    /**
     * Deletes the specified UrlMap resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to delete.
     * @return {object} The API response object.
     */
    this.urlMaps.delete = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}', 'DELETE', params);

    /**
     * Updates the specified UrlMap resource with the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.update = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}', 'PUT', params);

    /**
     * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.patch = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}', 'PATCH', params);

    /**
     * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to be validated as.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.validate = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}/validate', 'POST', params);

    /**
     * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.urlMap - (Required) Name of the UrlMap scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.invalidateCache = (params) => this._makeRequest('projects/{project}/global/urlMaps/{urlMap}/invalidateCache', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.urlMaps.testIamPermissions = (params) => this._makeRequest('projects/{project}/global/urlMaps/{resource}/testIamPermissions', 'POST', params);

    this.regionUrlMaps = {};

    /**
     * Retrieves the list of UrlMap resources available to the specified project in the specified region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.list = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps', 'GET', params);

    /**
     * Returns the specified UrlMap resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to return.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.get = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}', 'GET', params);

    /**
     * Creates a UrlMap resource in the specified project using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps', 'POST', params);

    /**
     * Deletes the specified UrlMap resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to delete.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}', 'DELETE', params);

    /**
     * Updates the specified UrlMap resource with the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to update.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.update = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}', 'PUT', params);

    /**
     * Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.patch = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}', 'PATCH', params);

    /**
     * Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.urlMap - (Required) Name of the UrlMap resource to be validated as.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.validate = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}/validate', 'POST', params);

    /**
     * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region scoping this request.
     * @param {string} params.requestId - begin_interface: MixerMutationRequestBuilder Request ID to support idempotency.
     * @param {string} params.urlMap - (Required) Name of the UrlMap scoping this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.invalidateCache = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache', 'POST', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.regionUrlMaps.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions', 'POST', params);

    this.vpnGateways = {};

    /**
     * Retrieves a list of VPN gateways available to the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.vpnGateways.list = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways', 'GET', params);

    /**
     * Retrieves an aggregated list of VPN gateways. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.vpnGateways.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/vpnGateways', 'GET', params);

    /**
     * Returns the specified VPN gateway.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.vpnGateway - (Required) Name of the VPN gateway to return.
     * @return {object} The API response object.
     */
    this.vpnGateways.get = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways/{vpnGateway}', 'GET', params);

    /**
     * Returns the status for the specified VPN gateway.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.vpnGateway - (Required) Name of the VPN gateway to return.
     * @return {object} The API response object.
     */
    this.vpnGateways.getStatus = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus', 'GET', params);

    /**
     * Creates a VPN gateway in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnGateways.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways', 'POST', params);

    /**
     * Deletes the specified VPN gateway.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.vpnGateway - (Required) Name of the VPN gateway to delete.
     * @return {object} The API response object.
     */
    this.vpnGateways.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways/{vpnGateway}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnGateways.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnGateways.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels', 'POST', params);

    this.vpnTunnels = {};

    /**
     * Retrieves a list of VpnTunnel resources contained in the specified project and region.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.vpnTunnels.list = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels', 'GET', params);

    /**
     * Retrieves an aggregated list of VPN tunnels. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} params.includeAllScopes - Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} params.serviceProjectNumber - The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @return {object} The API response object.
     */
    this.vpnTunnels.aggregatedList = (params) => this._makeRequest('projects/{project}/aggregated/vpnTunnels', 'GET', params);

    /**
     * Returns the specified VpnTunnel resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.vpnTunnel - (Required) Name of the VpnTunnel resource to return.
     * @return {object} The API response object.
     */
    this.vpnTunnels.get = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}', 'GET', params);

    /**
     * Creates a VpnTunnel resource in the specified project and region using the data included in the request.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnTunnels.insert = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels', 'POST', params);

    /**
     * Deletes the specified VpnTunnel resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Name of the region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.vpnTunnel - (Required) Name of the VpnTunnel resource to delete.
     * @return {object} The API response object.
     */
    this.vpnTunnels.delete = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}', 'DELETE', params);

    /**
     * Returns permissions that a caller has on the specified resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The name of the region for this request.
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnTunnels.testIamPermissions = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions', 'POST', params);

    /**
     * Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) The region for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
     * @param {string} params.resource - (Required) Name or id of the resource for this request.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.vpnTunnels.setLabels = (params) => this._makeRequest('projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels', 'POST', params);

    this.wireGroups = {};

    /**
     * Lists the wire groups for a project in the given scope.
     * @param {string} params.crossSiteNetwork - (Required)
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.wireGroups.list = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}/wireGroups', 'GET', params);

    /**
     * Gets the specified wire group resource in the given scope.
     * @param {string} params.crossSiteNetwork - (Required)
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.wireGroup - (Required) Name of the wire group resource to return.
     * @return {object} The API response object.
     */
    this.wireGroups.get = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}/wireGroups/{wireGroup}', 'GET', params);

    /**
     * Creates a wire group in the specified project in the given scope using the parameters that are included in the request.
     * @param {string} params.crossSiteNetwork - (Required)
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {boolean} params.validateOnly - [Input Only] Validate the new configuration, but don't create it.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.wireGroups.insert = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}/wireGroups', 'POST', params);

    /**
     * Deletes the specified wire group in the given scope.
     * @param {string} params.crossSiteNetwork - (Required)
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {string} params.wireGroup - (Required) Name of the wire group resource to delete.
     * @return {object} The API response object.
     */
    this.wireGroups.delete = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}/wireGroups/{wireGroup}', 'DELETE', params);

    /**
     * Updates the specified wire group resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * @param {string} params.crossSiteNetwork - (Required)
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.requestId - An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface: MixerMutationRequestBuilder
     * @param {string} params.updateMask - update_mask indicates fields to be updated as part of this request.
     * @param {boolean} params.validateOnly - [Input Only] Validate the new configuration, but don't update it.
     * @param {string} params.wireGroup - (Required) Name of the WireGroups resource to patch.
     * @param {object} params.resource - The request body.
     * @return {object} The API response object.
     */
    this.wireGroups.patch = (params) => this._makeRequest('projects/{project}/global/crossSiteNetworks/{crossSiteNetwork}/wireGroups/{wireGroup}', 'PATCH', params);

    this.zones = {};

    /**
     * Retrieves the list of Zone resources available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.zones.list = (params) => this._makeRequest('projects/{project}/zones', 'GET', params);

    /**
     * Returns the specified Zone resource.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.zone - (Required) Name of the zone resource to return.
     * @return {object} The API response object.
     */
    this.zones.get = (params) => this._makeRequest('projects/{project}/zones/{zone}', 'GET', params);

    this.regionZones = {};

    /**
     * Retrieves the list of Zone resources under the specific region available to the specified project.
     * @param {string} params.filter - A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {integer} params.maxResults - The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} params.orderBy - Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} params.pageToken - Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} params.project - (Required) Project ID for this request.
     * @param {string} params.region - (Required) Region for this request.
     * @param {boolean} params.returnPartialSuccess - Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @return {object} The API response object.
     */
    this.regionZones.list = (params) => this._makeRequest('projects/{project}/regions/{region}/zones', 'GET', params);
  }

  /**
   * @private Builds the full request URL and options object.
   */
  _buildRequestDetails(path, httpMethod, params) {
    let url = this._rootUrl + this._servicePath + path;
    const remainingParams = { ...params };
    // Fix: Correctly handle {+param} style parameters and other potential special chars.
    const pathParams = url.match(/{[^{}]+}/g) || [];

    pathParams.forEach(placeholder => {
      const isPlus = placeholder.startsWith('{+');
      const paramName = placeholder.slice(isPlus ? 2 : 1, -1);
      if (Object.prototype.hasOwnProperty.call(remainingParams, paramName)) {
        // Fix: URI-encode path parameters for safety.
        url = url.replace(placeholder, encodeURIComponent(remainingParams[paramName]));
        delete remainingParams[paramName];
      }
    });

    const queryParts = [];
    for (const key in remainingParams) {
      if (key !== 'resource') {
        queryParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(remainingParams[key])}`);
      }
    }
    if (queryParts.length > 0) {
      url += '?' + queryParts.join('&');
    }

    const options = {
      method: httpMethod,
      headers: { 'Authorization': 'Bearer ' + this._token },
      contentType: 'application/json',
      muteHttpExceptions: true,
    };
    if (params && params.resource) {
      options.payload = JSON.stringify(params.resource);
    }
    
    return { url, options };
  }

  /**
   * @private Makes the HTTP request with exponential backoff for retries.
   */
  _makeRequest(path, httpMethod, params) {
    const { url, options } = this._buildRequestDetails(path, httpMethod, params);

    for (let i = 0; i <= this._backoffConfig.retries; i++) {
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseText = response.getContentText(); // Simplified call

      if (responseCode >= 200 && responseCode < 300) {
        return responseText ? JSON.parse(responseText) : {};
      }

      const retryableErrors = [429, 500, 503];
      if (retryableErrors.includes(responseCode) && i < this._backoffConfig.retries) {
        const delay = this._backoffConfig.baseDelay * Math.pow(2, i) + Math.random() * 1000;
        Utilities.sleep(delay);
        continue;
      }

      try {
        // Return parsed error if possible, otherwise a generic error object
        return JSON.parse(responseText);
      } catch (e) {
        return { error: { code: responseCode, message: responseText } };
      }
    }
    
    // This line is technically unreachable if retries >= 0, but good for safety.
    throw new Error('Request failed after multiple retries.');
  }
}
