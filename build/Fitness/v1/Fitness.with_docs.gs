
/**
 * Google Apps Script client library for the Fitness API
 * Documentation URL: https://developers.google.com/fit/rest/v1/get-started
 * @class
 */
class Fitness {
  /**
   * @constructor
   * @param {object} [config] - Optional configuration object.
   * @param {string} [config.token] - An explicit OAuth2 token.
   * @param {object} [config.backoff] - Configuration for exponential backoff.
   */
  constructor(config = {}) {
    this._token = config.token || ScriptApp.getOAuthToken();
    this._backoffConfig = Object.assign({ retries: 3, baseDelay: 1000 }, config.backoff);
    this._rootUrl = 'https://fitness.googleapis.com/';
    this._servicePath = 'fitness/v1/users/';


    this.users = {};

    this.users.dataSources = {};

    /**
     * Creates a new data source that is unique across all data sources belonging to this user. A data source is a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source. Each data source produces a unique stream of dataset updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device can still be considered to belong to the same data source. Data sources are identified using a string generated by the server, based on the contents of the source being created. The dataStreamId field should not be set when invoking this method. It will be automatically generated by the server with the correct format. If a dataStreamId is set, it must match the format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an error. Specifying a DataType which is not a known type (beginning with "com.google.") will create a DataSource with a *custom data type*. Custom data types are only readable by the application that created them. Custom data types are *deprecated*; use standard data types instead. In addition to the data source fields included in the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.userId - (Required) Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} apiParams.requestBody - The request body.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.create = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources', 'POST', apiParams, clientConfig);

    /**
     * Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataTypeName - The names of data types to include in the list. If not specified, all data sources will be returned.
     * @param {string} apiParams.userId - (Required) List data sources for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.list = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources', 'GET', apiParams, clientConfig);

    /**
     * Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified. Data sources are identified by their dataStreamId.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source to update.
     * @param {string} apiParams.userId - (Required) Update the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} apiParams.requestBody - The request body.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.update = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}', 'PUT', apiParams, clientConfig);

    /**
     * Returns the specified data source.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source to retrieve.
     * @param {string} apiParams.userId - (Required) Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.get = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}', 'GET', apiParams, clientConfig);

    /**
     * Deletes the specified data source. The request will fail if the data source contains any data points.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source to delete.
     * @param {string} apiParams.userId - (Required) Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.delete = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}', 'DELETE', apiParams, clientConfig);

    this.users.dataSources.datasets = {};

    /**
     * Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics: the data points provided are merely inserted, with no existing data replaced.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source that created the dataset.
     * @param {string} apiParams.datasetId - (Required) This field is not used, and can be safely omitted.
     * @param {string} apiParams.userId - (Required) Patch a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} apiParams.requestBody - The request body.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.datasets.patch = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}/datasets/{datasetId}', 'PATCH', apiParams, clientConfig);

    /**
     * Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source that created the dataset.
     * @param {string} apiParams.datasetId - (Required) Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.
     * @param {integer} apiParams.limit - If specified, no more than this many data points will be included in the dataset. If there are more data points in the dataset, nextPageToken will be set in the dataset response. The limit is applied from the end of the time range. That is, if pageToken is absent, the limit most recent data points will be returned.
     * @param {string} apiParams.pageToken - The continuation token, which is used to page through large datasets. To get the next page of a dataset, set this parameter to the value of nextPageToken from the previous response. Each subsequent call will yield a partial dataset with data point end timestamps that are strictly smaller than those in the previous partial response.
     * @param {string} apiParams.userId - (Required) Retrieve a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.datasets.get = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}/datasets/{datasetId}', 'GET', apiParams, clientConfig);

    /**
     * Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source that created the dataset.
     * @param {string} apiParams.datasetId - (Required) Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: "startTime-endTime" where startTime and endTime are 64 bit integers.
     * @param {string} apiParams.userId - (Required) Delete a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.datasets.delete = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}/datasets/{datasetId}', 'DELETE', apiParams, clientConfig);

    this.users.dataSources.dataPointChanges = {};

    /**
     * Queries for user's data point changes for a particular data source.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.dataSourceId - (Required) The data stream ID of the data source that created the dataset.
     * @param {integer} apiParams.limit - If specified, no more than this many data point changes will be included in the response.
     * @param {string} apiParams.pageToken - The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.
     * @param {string} apiParams.userId - (Required) List data points for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataSources.dataPointChanges.list = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataSources/{dataSourceId}/dataPointChanges', 'GET', apiParams, clientConfig);

    this.users.dataset = {};

    /**
     * Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggregated into exactly one bucket type per request.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.userId - (Required) Aggregate data for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} apiParams.requestBody - The request body.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.dataset.aggregate = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/dataset:aggregate', 'POST', apiParams, clientConfig);

    this.users.sessions = {};

    /**
     * Updates or insert a given session.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.sessionId - (Required) The ID of the session to be created.
     * @param {string} apiParams.userId - (Required) Create sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} apiParams.requestBody - The request body.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.sessions.update = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/sessions/{sessionId}', 'PUT', apiParams, clientConfig);

    /**
     * Lists sessions previously created.
     * @param {object} apiParams - The parameters for the API request.
     * @param {integer} apiParams.activityType - If non-empty, only sessions with these activity types should be returned.
     * @param {string} apiParams.endTime - An RFC3339 timestamp. Only sessions starting before endTime and ending after startTime up to (endTime + 1 day) will be included in the response. If this time is omitted but startTime is specified, all sessions ending after startTime to the end of time will be returned.
     * @param {boolean} apiParams.includeDeleted - If true, and if both startTime and endTime are omitted, session deletions will be returned.
     * @param {string} apiParams.pageToken - The continuation token, which is used for incremental syncing. To get the next batch of changes, set this parameter to the value of nextPageToken from the previous response. The page token is ignored if either start or end time is specified. If none of start time, end time, and the page token is specified, sessions modified in the last 30 days are returned.
     * @param {string} apiParams.startTime - An RFC3339 timestamp. Only sessions starting before endTime and ending after startTime up to (endTime + 1 day) will be included in the response. If this time is omitted but endTime is specified, all sessions starting before endTime and ending after the start of time up to (endTime + 1 day) will be returned.
     * @param {string} apiParams.userId - (Required) List sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.sessions.list = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/sessions', 'GET', apiParams, clientConfig);

    /**
     * Deletes a session specified by the given session ID.
     * @param {object} apiParams - The parameters for the API request.
     * @param {string} apiParams.sessionId - (Required) The ID of the session to be deleted.
     * @param {string} apiParams.userId - (Required) Delete a session for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
     * @param {object} [clientConfig] - Optional client-side configuration.
     * @param {string} [clientConfig.responseType] - The expected response type. Setting to 'blob' returns the raw file content. Omit for JSON.
     * @return {Promise<object>} A Promise that resolves with the response object. The response payload is in the `data` property, which will be a JSON object or a Blob.
     */
    this.users.sessions.delete = async (apiParams = {}, clientConfig = {}) => this._makeRequest('{userId}/sessions/{sessionId}', 'DELETE', apiParams, clientConfig);
  }

/**
 * @private Builds the full request URL and options object for a request.
 */
_buildRequestDetails(path, httpMethod, apiParams, clientConfig = {}) {
    let url;
    if (path.startsWith('/upload/')) {
        url = 'https://www.googleapis.com' + path;
    } else {
        url = this._rootUrl + this._servicePath + path;
    }

    const remainingParams = { ...apiParams };
    const pathParams = url.match(/{[^{}]+}/g) || [];

    pathParams.forEach(placeholder => {
        const isPlus = placeholder.startsWith('{+');
        const paramName = placeholder.slice(isPlus ? 2 : 1, -1);
        if (Object.prototype.hasOwnProperty.call(remainingParams, paramName)) {
            url = url.replace(placeholder, remainingParams[paramName]);
            delete remainingParams[paramName];
        }
    });

    const options = {
        method: httpMethod,
        headers: {
            'Authorization': 'Bearer ' + this._token,
            ...(clientConfig.headers || {}),
        },
        muteHttpExceptions: true,
    };

    if (apiParams && apiParams.media && apiParams.media.body) {
        let mediaBlob;
        // Check if the body is already a blob by "duck typing" for the getBytes method.
        if (apiParams.media.body.getBytes && typeof apiParams.media.body.getBytes === 'function') {
            mediaBlob = apiParams.media.body;
        } else {
            // If it's not a blob (e.g., a string or byte array), create one.
            mediaBlob = Utilities.newBlob(apiParams.media.body);
        }

        const hasMetadata = apiParams.requestBody && Object.keys(apiParams.requestBody).length > 0;

        if (hasMetadata) {
            // ** Multipart Upload (Media + Metadata) **
            remainingParams.uploadType = 'multipart';
            
            const boundary = '----' + Utilities.getUuid();
            const metadata = apiParams.requestBody;

            let requestData = '--' + boundary + '\r\n';
            requestData += 'Content-Type: application/json; charset=UTF-8\r\n\r\n';
            requestData += JSON.stringify(metadata) + '\r\n';
            requestData += '--' + boundary + '\r\n';
            requestData += 'Content-Type: ' + apiParams.media.mimeType + '\r\n\r\n';
            
            const payloadBytes = Utilities.newBlob(requestData).getBytes()
                .concat(mediaBlob.getBytes())
                .concat(Utilities.newBlob('\r\n--' + boundary + '--').getBytes());

            options.contentType = 'multipart/related; boundary=' + boundary;
            options.payload = payloadBytes;

        } else {
            // ** Simple Media Upload (Media only) **
            remainingParams.uploadType = 'media';

            options.contentType = mediaBlob.getContentType();
            options.payload = mediaBlob.getBytes();
        }

    } else if (apiParams && apiParams.requestBody) {
        options.contentType = 'application/json';
        options.payload = JSON.stringify(apiParams.requestBody);
    }
    const queryParts = [];
    for (const key in remainingParams) {
        if (key !== 'requestBody' && key !== 'media') {
            queryParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(remainingParams[key])}`);
        }
    }
    if (queryParts.length > 0) {
        url += '?' + queryParts.join('&');
    }

    return { url, options };
}

  /**
   * @private Makes the HTTP request with exponential backoff for retries.
   * @return {Promise<object>} A promise that resolves with the response object.
   */
  async _makeRequest(path, httpMethod, apiParams, clientConfig = {}) {
    const isMediaDownload = apiParams.alt === 'media';

    const { url, options } = this._buildRequestDetails(path, httpMethod, apiParams, clientConfig);

    for (let i = 0; i <= this._backoffConfig.retries; i++) {
      const response = UrlFetchApp.fetch(url, options);
      const responseCode = response.getResponseCode();
      const responseHeaders = response.getAllHeaders();

      if (responseCode >= 200 && responseCode < 300) {
        // Prioritize responseType:'blob' and media downloads to return raw data.
        if ((clientConfig && (clientConfig.responseType === 'blob' || clientConfig.responseType === 'stream')) || isMediaDownload) {
          return {
            data: response.getBlob(),
            status: responseCode,
            headers: responseHeaders,
          };
        }

        const responseText = response.getContentText();
        // Handle empty responses, which are valid (e.g., a 204 No Content).
        const responseBody = responseText ? JSON.parse(responseText) : {};
        return {
          data: responseBody,
          status: responseCode,
          headers: responseHeaders,
        };
      }

      const retryableErrors = [429, 500, 503];
      if (retryableErrors.includes(responseCode) && i < this._backoffConfig.retries) {
        const delay = this._backoffConfig.baseDelay * Math.pow(2, i) + Math.random() * 1000;
        Utilities.sleep(delay);
        continue;
      }

      const responseText = response.getContentText(); // Get response text for error
      let errorMessage = `Request failed with status ${responseCode}`;
      try {
        const errorObj = JSON.parse(responseText);
        if (errorObj.error && errorObj.error.message) {
          errorMessage += `: ${errorObj.error.message}`;
        }
      } catch (e) {
        // If the error response isn't JSON, include the raw text.
        if (responseText) {
          errorMessage += `. Response: ${responseText}`;
        }
      }
      throw new Error(errorMessage);
    }

    throw new Error('Request failed after multiple retries.');
  }
}
